"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6585],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),p=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(f,s(s({ref:t},c),{},{components:r})):a.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:n,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},42:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],l={title:"Dataloaders",sidebar_label:"Dataloaders"},i=void 0,p={unversionedId:"graphql/dataloaders",id:"graphql/dataloaders",title:"Dataloaders",description:"Nestjs-query integrates a standard implementation of dataloaders. Dataloaders are there to solve the n+1. Sometimes the default implementation can fail, for example when asynchronous custom authorizers are used and the n+1 problem occurs again despite using dataloaders. Then it may be useful to configure the default implementation of the dataloader, for example to pass a custom batch scheduler.",source:"@site/docs/graphql/dataloaders.mdx",sourceDirName:"graphql",slug:"/graphql/dataloaders",permalink:"/nestjs-query/docs/graphql/dataloaders",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/dataloaders.mdx",tags:[],version:"current",frontMatter:{title:"Dataloaders",sidebar_label:"Dataloaders"},sidebar:"docs",previous:{title:"Resolvers",permalink:"/nestjs-query/docs/graphql/resolvers"},next:{title:"Endpoints",permalink:"/nestjs-query/docs/graphql/queries/endpoints"}},c={},d=[],u={toc:d},m="wrapper";function f(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)(m,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Nestjs-query integrates a standard implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dataloader/v/2.1.0"},"dataloaders"),". Dataloaders are there to solve the ",(0,o.kt)("inlineCode",{parentName:"p"},"n+1"),". Sometimes the default implementation can fail, for example when asynchronous ",(0,o.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/authorization#custom-authorizer"},"custom authorizers")," are used and the ",(0,o.kt)("inlineCode",{parentName:"p"},"n+1")," problem occurs again despite using dataloaders. Then it may be useful to configure the default implementation of the dataloader, for example to pass a custom batch scheduler."),(0,o.kt)("p",null,"The following example demonstrates how to configure the generated dataloaders. For more information about the dataloader configuration, see the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dataloader/v/2.1.0"},"dataloader documentation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"import { Module } from '@nestjs/common';\nimport { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\n\n@Module({\n  imports: [\n    // ... other imports\n\n    NestjsQueryGraphQLModule.forRoot({\n      dataLoader: {\n        batchScheduleFn(callback) {\n          // Here is an example of a batch scheduler that collects\n          // all requests in a time window of 250ms:\n          setTimeout(callback, 250);\n        },\n      },\n    }),\n\n    // ... other imports\n  ],\n\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n")))}f.isMDXComponent=!0}}]);