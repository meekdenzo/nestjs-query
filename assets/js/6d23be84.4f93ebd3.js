"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[6405],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={title:"v0.4.0",author:"Doug Martin",author_title:"Creator",author_url:"https://github.com/tripss",author_image_url:"https://avatars1.githubusercontent.com/u/361261?v=4",tags:["releases","minor"]},u=void 0,p={permalink:"/nestjs-query/blog/2020/02/25/v0.4.0",editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/blog/blog/2020-02-25-v0.4.0.md",source:"@site/blog/2020-02-25-v0.4.0.md",title:"v0.4.0",description:"* Updated all mutations to take a single input argument with custom fields.",date:"2020-02-25T00:00:00.000Z",formattedDate:"February 25, 2020",tags:[{label:"releases",permalink:"/nestjs-query/blog/tags/releases"},{label:"minor",permalink:"/nestjs-query/blog/tags/minor"}],readingTime:.395,hasTruncateMarker:!1,authors:[{name:"Doug Martin",title:"Creator",url:"https://github.com/tripss",imageURL:"https://avatars1.githubusercontent.com/u/361261?v=4"}],frontMatter:{title:"v0.4.0",author:"Doug Martin",author_title:"Creator",author_url:"https://github.com/tripss",author_image_url:"https://avatars1.githubusercontent.com/u/361261?v=4",tags:["releases","minor"]},prevItem:{title:"v0.5.1",permalink:"/nestjs-query/blog/2020/03/02/v0.5.1"},nextItem:{title:"v0.5.0",permalink:"/nestjs-query/blog/2020/02/25/v0.5.0"}},s={authorsImageUrls:[void 0]},c=[],m={toc:c},d="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Updated all mutations to take a single ",(0,i.kt)("inlineCode",{parentName:"li"},"input")," argument with custom fields.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: DTO)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: { [dtoName]: DTO })")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createMany(input: DTO[])")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: { [pluralDTOName]: DTO[] })")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateOne(id: ID, input: UpdateDTO)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: { id: ID, update: UpdateDTO })")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateMany(filter: Filter<DTO>, input: UpdateDTO)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: { filter: Filter<DTO>, update: UpdateDTO })")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deleteOne(input: ID)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"deleteOne(input: {id: ID})")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deleteMany(input: Filter<DTO>)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"createOne(input: { filter: Filter<DTO> })")))),(0,i.kt)("li",{parentName:"ul"},"Updated docs to reflect changes.")))}f.isMDXComponent=!0}}]);