"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[3190],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),p=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=o,y=d["".concat(a,".").concat(c)]||d[c]||u[c]||i;return n?r.createElement(y,l(l({ref:t},m),{},{components:n})):r.createElement(y,l({ref:t},m))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>y,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),l=["components"],s={title:"Soft Delete"},a=void 0,p={unversionedId:"persistence/typeorm/soft-delete",id:"persistence/typeorm/soft-delete",title:"Soft Delete",description:"TypeOrm supports soft deletes. This feature does not delete records but instead updates the column decorated with @DeleteDateColumn.",source:"@site/docs/persistence/typeorm/soft-delete.md",sourceDirName:"persistence/typeorm",slug:"/persistence/typeorm/soft-delete",permalink:"/nestjs-query/docs/persistence/typeorm/soft-delete",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/persistence/typeorm/soft-delete.md",tags:[],version:"current",frontMatter:{title:"Soft Delete"},sidebar:"docs",previous:{title:"Multiple Databases",permalink:"/nestjs-query/docs/persistence/typeorm/multiple-databases"},next:{title:"Testing Services",permalink:"/nestjs-query/docs/persistence/typeorm/testing-services"}},m={},d=[{value:"Setting up your entity.",id:"setting-up-your-entity",level:2},{value:"Soft Delete Service",id:"soft-delete-service",level:2},{value:"Adding restore mutations.",id:"adding-restore-mutations",level:3},{value:"Complete Example",id:"complete-example",level:2}],u={toc:d},c="wrapper";function y(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TypeOrm")," supports ",(0,i.kt)("a",{parentName:"p",href:"https://typeorm.io/#/delete-query-builder/soft-delete"},"soft deletes"),". This feature does not delete records but instead updates the column decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@DeleteDateColumn"),". "),(0,i.kt)("p",null,"Before continuing it is recommended that you read the following."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://typeorm.io/#/decorator-reference/deletedatecolumn"},"https://typeorm.io/#/decorator-reference/deletedatecolumn")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://typeorm.io/#/delete-query-builder/soft-delete"},"https://typeorm.io/#/delete-query-builder/soft-delete"))),(0,i.kt)("h2",{id:"setting-up-your-entity"},"Setting up your entity."),(0,i.kt)("p",null,"Before enabling soft deletes you must add the DeleteDateColumn to your entity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.entity.ts"',title:'"todo-item.entity.ts"'},"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn, DeleteDateColumn } from 'typeorm';\n\n@Entity({ name: 'todo_item' })\nexport class TodoItemEntity {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column()\n  title!: string;\n\n  @Column({ nullable: true })\n  description?: string;\n\n  @Column()\n  completed!: boolean;\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n\n  // Add this column to your entity!\n  @DeleteDateColumn()\n  deletedAt?: Date;\n}\n")),(0,i.kt)("p",null,"The important column is the ",(0,i.kt)("inlineCode",{parentName:"p"},"deletedAt")," column in the above example. Without this column soft deletes will not work. If you add this column all reads from the ",(0,i.kt)("inlineCode",{parentName:"p"},"typeorm")," repository will add a where clause checking that the column ",(0,i.kt)("inlineCode",{parentName:"p"},"IS NULL"),"."),(0,i.kt)("h2",{id:"soft-delete-service"},"Soft Delete Service"),(0,i.kt)("p",null,"Once you have added the column to your entity you need to declare your service setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSoftDelete")," flag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.service.ts"',title:'"todo-item.service.ts"'},"import { QueryService } from '@ptc-org/nestjs-query-core';\nimport { TypeOrmQueryService } from '@ptc-org/nestjs-query-typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@QueryService(TodoItemEntity)\nexport class TodoItemService extends TypeOrmQueryService<TodoItemEntity> {\n  constructor(@InjectRepository(TodoItemEntity) repo: Repository<TodoItemEntity>) {\n    // pass the use soft delete option to the service.\n    super(repo, { useSoftDelete: true });\n  }\n}\n")),(0,i.kt)("p",null,"Notice that when calling ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSoftDelete")," option is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This will ensure that all ",(0,i.kt)("inlineCode",{parentName:"p"},"deletes")," use the ",(0,i.kt)("inlineCode",{parentName:"p"},"softRemove")," when deleting one or ",(0,i.kt)("inlineCode",{parentName:"p"},"softDelete")," when deleting many."),(0,i.kt)("h3",{id:"adding-restore-mutations"},"Adding restore mutations."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"nestjs-query")," does not automatically expose ",(0,i.kt)("inlineCode",{parentName:"p"},"restore")," mutations. In this example we add the restore mutations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { UpdateManyResponse, Filter } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver, FilterType, UpdateManyResponseType } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver, Args, Mutation, ID } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n\n  // restore one mutation will update the `deletedAt` column to null.\n  @Mutation(() => TodoItemDTO)\n  restoreOneTodoItem(@Args('input', { type: () => ID }) id: number): Promise<TodoItemDTO> {\n    return this.service.restoreOne(id);\n  }\n\n  // restore many mutation will update the `deletedAt` column to null for all todo items that\n  // match the filter.\n  @Mutation(() => UpdateManyResponseType())\n  restoreManyTodoItems(\n    @Args('input', { type: () => FilterType(TodoItemDTO) }) filter: Filter<TodoItemDTO>,\n  ): Promise<UpdateManyResponse> {\n    return this.service.restoreMany(filter);\n  }\n}\n")),(0,i.kt)("h2",{id:"complete-example"},"Complete Example"),(0,i.kt)("p",null,"To see a complete example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tripss/nestjs-query/tree/master/examples/typeorm-soft-delete"},"see here.")))}y.isMDXComponent=!0}}]);