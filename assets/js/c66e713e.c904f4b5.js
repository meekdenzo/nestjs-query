"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[1409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=l,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(4334);const r={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(7462),l=n(7294),r=n(4334),i=n(2466),o=n(6550),s=n(1980),u=n(7392),p=n(12);function c(e){return function(e){var t,n;return null!=(t=null==(n=l.Children.map(e,(function(e){if(!e||(0,l.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,n=e.children;return(0,l.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function d(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,r=(0,o.k6)(),i=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(i),(0,l.useCallback)((function(e){if(i){var t=new URLSearchParams(r.location.search);t.set(i,e),r.replace(Object.assign({},r.location,{search:t.toString()}))}}),[i,r])]}function k(e){var t,n,a,r,i=e.defaultValue,o=e.queryString,s=void 0!==o&&o,u=e.groupId,c=m(e),k=(0,l.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var l=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:i,tabValues:c})})),g=k[0],N=k[1],y=f({queryString:s,groupId:u}),v=y[0],h=y[1],b=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),n=(0,p.Nk)(t),a=n[0],r=n[1],[a,(0,l.useCallback)((function(e){t&&r.set(e)}),[t,r])]),C=b[0],q=b[1],T=function(){var e=null!=v?v:C;return d({value:e,tabValues:c})?e:null}();return(0,l.useLayoutEffect)((function(){T&&N(T)}),[T]),{selectedValue:g,selectValue:(0,l.useCallback)((function(e){if(!d({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);N(e),h(e),q(e)}),[h,q,c]),tabValues:c}}var g=n(2389);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){var t=e.className,n=e.block,o=e.selectedValue,s=e.selectValue,u=e.tabValues,p=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==o&&(c(t),s(a))},d=function(e){var t,n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,l=p.indexOf(e.currentTarget)+1;n=null!=(a=p[l])?a:p[0];break;case"ArrowLeft":var r,i=p.indexOf(e.currentTarget)-1;n=null!=(r=p[i])?r:p[p.length-1]}null==(t=n)||t.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((function(e){var t=e.value,n=e.label,i=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return p.push(e)},onKeyDown:d,onClick:m},i,{className:(0,r.Z)("tabs__item",N.tabItem,null==i?void 0:i.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function v(e){var t=e.lazy,n=e.children,a=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var i=r.find((function(e){return e.props.value===a}));return i?(0,l.cloneElement)(i,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function h(e){var t=k(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",N.tabList)},l.createElement(y,(0,a.Z)({},e,t)),l.createElement(v,(0,a.Z)({},e,t)))}function b(e){var t=(0,g.Z)();return l.createElement(h,(0,a.Z)({key:String(t)},e))}},3870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>g,frontMatter:()=>u,metadata:()=>c,toc:()=>d});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=n(4866),o=n(5162),s=["components"],u={title:"Queries"},p=void 0,c={unversionedId:"concepts/queries",id:"concepts/queries",title:"Queries",description:"The core of nestjs-query is the Query, it is used by @ptc-org/nestjs-query-graphql, @ptc-org/nestjs-query-typeorm",source:"@site/docs/concepts/queries.mdx",sourceDirName:"concepts",slug:"/concepts/queries",permalink:"/nestjs-query/docs/concepts/queries",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/concepts/queries.mdx",tags:[],version:"current",frontMatter:{title:"Queries"},sidebar:"docs",previous:{title:"DTOs",permalink:"/nestjs-query/docs/concepts/dtos"},next:{title:"QueryService",permalink:"/nestjs-query/docs/concepts/services"}},m={},d=[{value:"Filtering",id:"filtering",level:2},{value:"Simple",id:"simple",level:3},{value:"Multiple Fields",id:"multiple-fields",level:3},{value:"Multiple Comparisons on a single field.",id:"multiple-comparisons-on-a-single-field",level:3},{value:"And/Or",id:"andor",level:3},{value:"Paging",id:"paging",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filter Reference",id:"filter-reference",level:2},{value:"Common Comparisons",id:"common-comparisons",level:3},{value:"String Comparisons",id:"string-comparisons",level:3}],f={toc:d},k="wrapper";function g(e){var t=e.components,n=(0,l.Z)(e,s);return(0,r.kt)(k,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The core of ",(0,r.kt)("inlineCode",{parentName:"p"},"nestjs-query")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Query"),", it is used by ",(0,r.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-graphql"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-typeorm"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-sequelize"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-mongoose")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-typegoose"),"."),(0,r.kt)("p",null,"The query interface contains three optional fields."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"paging")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sorting"))),(0,r.kt)("p",null,"All examples will be based on the following class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface MyClass {\n  title: string;\n  completed: boolean;\n  age: number;\n}\n")),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," field allows the filtering of fields based on the shape of the object the filter is used for."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#filter-reference"},"filter reference")," for a complete list of comparisons available."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Filter")," interface is typesafe and the typescript compiler will complain if you include extra fields that are not present on the type you are creating the query for.")),(0,r.kt)("p",null,"Lets create a simple filter that would allow us to filter for titles equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"'Foo Bar'")),(0,r.kt)("h3",{id:"simple"},"Simple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Query } from '@ptc-org/nestjs-query-core';\n\nconst q: Query<MyClass> = {\n  filter: {\n    title: { eq: 'Foo Bar' },\n  },\n};\n")),(0,r.kt)("h3",{id:"multiple-fields"},"Multiple Fields"),(0,r.kt)("p",null,"You can also filter on multiple fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Query } from '@ptc-org/nestjs-query-core';\n\nconst q: Query<MyClass> = {\n  filter: {\n    // title = 'Foo Bar' AND completed IS TRUE and age > 10\n    title: { eq: 'Foo Bar' },\n    completed: { is: true },\n    age: { gt: 10 },\n  },\n};\n")),(0,r.kt)("h3",{id:"multiple-comparisons-on-a-single-field"},"Multiple Comparisons on a single field."),(0,r.kt)("p",null,"If you include multiple comparisons for a single field they will be ORed together."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Query } from '@ptc-org/nestjs-query-core';\n\nconst q: Query<MyClass> = {\n  filter: {\n    // title = 'Foo Bar' OR field LIKE '%foo%'\n    title: { eq: 'Foo Bar', like: '%foo%' },\n  },\n};\n")),(0,r.kt)("h3",{id:"andor"},"And/Or"),(0,r.kt)("p",null,"The filter also allows for more complex ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," filters. The ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," accept an array of filters allowing\nfor nested complex queries."),(0,r.kt)("p",null,"In this example we ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," two filters for the same property together: ",(0,r.kt)("inlineCode",{parentName:"p"},"age >= 10 AND age <= 20"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  filter: {\n    and: [{ age: { gte: 10 } }, { age: { lte: 20 } }],\n  },\n};\n")),(0,r.kt)("p",null,"In this example a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"OR")," condition is created: ",(0,r.kt)("inlineCode",{parentName:"p"},"age >= 10 OR title NOT LIKE '%bar'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  filter: {\n    or: [{ age: { gte: 10 } }, { title: { notLike: '%bar' } }],\n  },\n};\n")),(0,r.kt)("p",null,"This example combines ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OR")," filters: ",(0,r.kt)("inlineCode",{parentName:"p"},"age >= 10 AND (title LIKE '%bar' OR title = 'foobar')"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  filter: {\n    and: [\n      { age: { gte: 10 } },\n      {\n        or: [{ title: { like: '%bar' } }, { title: { eq: 'foobar' } }],\n      },\n    ],\n  },\n};\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"paging"},"Paging"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"core")," package defines a basic paging interface has two optional fields ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),"."),(0,r.kt)(i.Z,{defaultValue:"limit-offset",values:[{label:"Limit And Offset",value:"limit-offset"},{label:"Limit",value:"limit"},{label:"Offset",value:"offset"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"limit-offset",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  paging: {\n    limit: 10,\n    offset: 10,\n  },\n};\n"))),(0,r.kt)(o.Z,{value:"limit",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  paging: {\n    limit: 20,\n  },\n};\n"))),(0,r.kt)(o.Z,{value:"offset",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const q: Query<MyClass> = {\n  paging: {\n    offset: 10,\n  },\n};\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When using filters on relations with ",(0,r.kt)("inlineCode",{parentName:"p"},"typeorm")," in combination with paging, performance can be degraded on large result\nsets. For more info see this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tripss/nestjs-query/issues/954"},"issue")),(0,r.kt)("p",{parentName:"admonition"},"In short two queries will be executed:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The first one fetching a distinct list of primary keys with paging applied."),(0,r.kt)("li",{parentName:"ul"},"The second uses primary keys from the first query to fetch the actual records."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sorting")," field allows to specify the sort order for your query."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sorting")," field is an array of object containing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field")," - the field to sort on"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"direction")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"ASC")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"DESC")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nulls?")," - Optional nulls sort, ",(0,r.kt)("inlineCode",{parentName:"li"},"NULLS_FIRST")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"NULLS_LAST"))),(0,r.kt)(i.Z,{defaultValue:"single",values:[{label:"Single-Sort",value:"single"},{label:"Multi-Sort",value:"multi"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"single",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// import { SortDirection } from '@ptc-org/nestjs-query-core';\n\nconst q: Query<MyClass> = {\n  sorting: [{ field: 'title', direction: SortDirection.DESC }],\n};\n"))),(0,r.kt)(o.Z,{value:"multi",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// import { SortDirection } from '@ptc-org/nestjs-query-core';\n\nconst q: Query<MyClass> = {\n  sorting: [\n    { field: 'title', direction: SortDirection.DESC },\n    { field: 'age', direction: SortDirection.ASC },\n  ],\n};\n")))),(0,r.kt)("h2",{id:"filter-reference"},"Filter Reference"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," option supports the following field comparisons."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The following examples show an approximation of the SQL that will be generated. The ORM will take care of handling the dialect specifics")),(0,r.kt)("h3",{id:"common-comparisons"},"Common Comparisons"),(0,r.kt)("p",null,"All types support the following comparisons."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is")," - Check is a field is ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title IS NULL\n{\n  title: {\n    is: null;\n  }\n}\n// completed IS TRUE\n{\n  completed: {\n    is: true;\n  }\n}\n// completed IS false\n{\n  completed: {\n    is: false;\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isNot")," - Check is a field is not ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title IS NOT NULL\n{\n  title: {\n    isNot: null;\n  }\n}\n// completed IS NOT TRUE\n{\n  completed: {\n    isNot: true;\n  }\n}\n// completed IS NOT false\n{\n  completed: {\n    isNot: false;\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"neq")," - field is not equal to a value.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title != 'foo'\n{\n  title: {\n    neq: 'foo';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gt")," - field is greater than a value.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title > 'foo'\n{\n  title: {\n    gt: 'foo';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gte")," - field is greater than or equal to a value.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title >= 'foo'\n{\n  title: {\n    gte: 'foo';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lt")," - field is less than a value.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title < 'foo'\n{\n  title: {\n    lt: 'foo';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lte")," - field is less than or equal to a value.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title <= 'foo'\n{\n  title: {\n    lte: 'foo';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"in")," - field is in a list of values.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title IN ('foo', 'bar', 'baz')\n{ title: { in: ['foo', 'bar', 'baz'] } }\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notIn")," - field is not in a list of values.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title NOT IN ('foo', 'bar', 'baz')\n{\n  title: {\n    notIn: ['foo', 'bar', 'baz'];\n  }\n}\n")))),(0,r.kt)("h3",{id:"string-comparisons"},"String Comparisons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"like")," - field is like a value (case sensitive).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title LIKE 'Foo%'\n{\n  title: {\n    like: 'Foo%';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notLike")," - field is not like a value (case sensitive).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title NOT LIKE 'Foo%'\n{\n  title: {\n    notLike: 'Foo%';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"iLike")," - field is like a value (case insensitive).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title ILIKE 'Foo%'\n{\n  title: {\n    iLike: 'Foo%';\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notILike")," - field is not like a value (case insensitive).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// title NOT ILIKE 'Foo%'\n{\n  title: {\n    notILike: 'Foo%';\n  }\n}\n")))))}g.isMDXComponent=!0}}]);