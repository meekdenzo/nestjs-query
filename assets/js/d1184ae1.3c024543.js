"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[9358],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,g=c["".concat(i,".").concat(d)]||c[d]||p[d]||s;return r?n.createElement(g,l(l({ref:t},m),{},{components:r})):n.createElement(g,l({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<s;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294),a=r(4334);const s={tabItem:"tabItem_Ymn6"};function l(e){var t=e.children,r=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,l),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>T});var n=r(7462),a=r(7294),s=r(4334),l=r(2466),o=r(6550),i=r(1980),u=r(7392),m=r(12);function c(e){return function(e){var t,r;return null!=(t=null==(r=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:r.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,r=e.children;return(0,a.useMemo)((function(){var e=null!=t?t:c(r);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,r])}function d(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function g(e){var t=e.queryString,r=void 0!==t&&t,n=e.groupId,s=(0,o.k6)(),l=function(e){var t=e.queryString,r=void 0!==t&&t,n=e.groupId;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:r,groupId:n});return[(0,i._X)(l),(0,a.useCallback)((function(e){if(l){var t=new URLSearchParams(s.location.search);t.set(l,e),s.replace(Object.assign({},s.location,{search:t.toString()}))}}),[l,s])]}function y(e){var t,r,n,s,l=e.defaultValue,o=e.queryString,i=void 0!==o&&o,u=e.groupId,c=p(e),y=(0,a.useState)((function(){return function(e){var t,r=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!d({value:r,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}var a=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:l,tabValues:c})})),v=y[0],h=y[1],f=g({queryString:i,groupId:u}),b=f[0],k=f[1],T=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),r=(0,m.Nk)(t),n=r[0],s=r[1],[n,(0,a.useCallback)((function(e){t&&s.set(e)}),[t,s])]),N=T[0],A=T[1],O=function(){var e=null!=b?b:N;return d({value:e,tabValues:c})?e:null}();return(0,a.useLayoutEffect)((function(){O&&h(O)}),[O]),{selectedValue:v,selectValue:(0,a.useCallback)((function(e){if(!d({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);h(e),k(e),A(e)}),[k,A,c]),tabValues:c}}var v=r(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){var t=e.className,r=e.block,o=e.selectedValue,i=e.selectValue,u=e.tabValues,m=[],c=(0,l.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,r=m.indexOf(t),n=u[r].value;n!==o&&(c(t),i(n))},d=function(e){var t,r=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var n,a=m.indexOf(e.currentTarget)+1;r=null!=(n=m[a])?n:m[0];break;case"ArrowLeft":var s,l=m.indexOf(e.currentTarget)-1;r=null!=(s=m[l])?s:m[m.length-1]}null==(t=r)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},u.map((function(e){var t=e.value,r=e.label,l=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return m.push(e)},onKeyDown:d,onClick:p},l,{className:(0,s.Z)("tabs__item",h.tabItem,null==l?void 0:l.className,{"tabs__item--active":o===t})}),null!=r?r:t)})))}function b(e){var t=e.lazy,r=e.children,n=e.selectedValue,s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){var l=s.find((function(e){return e.props.value===n}));return l?(0,a.cloneElement)(l,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function k(e){var t=y(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",h.tabList)},a.createElement(f,(0,n.Z)({},e,t)),a.createElement(b,(0,n.Z)({},e,t)))}function T(e){var t=(0,v.Z)();return a.createElement(k,(0,n.Z)({key:String(t)},e))}},7410:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>v,frontMatter:()=>u,metadata:()=>c,toc:()=>d});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),l=r(4866),o=r(5162),i=["components"],u={title:"Assemblers"},m=void 0,c={unversionedId:"concepts/advanced/assemblers",id:"concepts/advanced/assemblers",title:"Assemblers",description:"Assemblers are used to translate your DTO into the underlying database type and back.",source:"@site/docs/concepts/advanced/assemblers.mdx",sourceDirName:"concepts/advanced",slug:"/concepts/advanced/assemblers",permalink:"/nestjs-query/docs/concepts/advanced/assemblers",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/concepts/advanced/assemblers.mdx",tags:[],version:"current",frontMatter:{title:"Assemblers"},sidebar:"docs",previous:{title:"QueryService",permalink:"/nestjs-query/docs/concepts/services"},next:{title:"Services",permalink:"/nestjs-query/docs/persistence/services"}},p={},d=[{value:"When to use Assemblers",id:"when-to-use-assemblers",level:2},{value:"Why?",id:"why",level:2},{value:"Resolvers",id:"resolvers",level:3},{value:"Services",id:"services",level:3},{value:"Assemblers",id:"assemblers",level:3},{value:"Why not use the assembler in the resolver?",id:"why-not-use-the-assembler-in-the-resolver",level:3},{value:"ClassTransformerAssembler",id:"classtransformerassembler",level:2},{value:"AbstractAssembler",id:"abstractassembler",level:2},{value:"Converting the Query",id:"converting-the-query",level:3},{value:"Converting the DTO",id:"converting-the-dto",level:3},{value:"Converting the Entity",id:"converting-the-entity",level:3},{value:"Converting Aggregate Query",id:"converting-aggregate-query",level:3},{value:"Converting Aggregate Response",id:"converting-aggregate-response",level:3},{value:"Converting Create DTO",id:"converting-create-dto",level:3},{value:"Converting Update DTO",id:"converting-update-dto",level:3},{value:"AssemblerQueryService",id:"assemblerqueryservice",level:2},{value:"Module",id:"module",level:3},{value:"Auto Generated Resolver",id:"auto-generated-resolver",level:3},{value:"Manual Resolver",id:"manual-resolver",level:3}],g={toc:d},y="wrapper";function v(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)(y,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Assemblers are used to translate your DTO into the underlying database type and back."),(0,s.kt)("h2",{id:"when-to-use-assemblers"},"When to use Assemblers"),(0,s.kt)("p",null,"In most cases an Assembler will not be required because your Entity and DTO will be the same shape."),(0,s.kt)("p",null,"The only time you need to define an assembler is when the DTO and Entity are different. The most common scenarios are"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Additional computed fields and you do not want to include the business logic in your DTO definition."),(0,s.kt)("li",{parentName:"ul"},"Different field names because of poorly named columns in the database or to make a DB change passive to the end user."),(0,s.kt)("li",{parentName:"ul"},"You need to transform the create or update DTO before being passed to your persistence QueryService")),(0,s.kt)("h2",{id:"why"},"Why?"),(0,s.kt)("p",null,"Separation of concerns."),(0,s.kt)("h3",{id:"resolvers"},"Resolvers"),(0,s.kt)("p",null,"Your resolvers only concern is dealing with graphql and translating the request (a DTO) into something the service cares about."),(0,s.kt)("p",null,"The resolver should not care about how it is persisted. The underlying Entity ",(0,s.kt)("strong",{parentName:"p"},"could")," have additional fields that you do not want to expose in your API, or it may be persisted into multiple stores."),(0,s.kt)("p",null,"By separating the resolver from the persistence layer you can evolve your API separate from your database model."),(0,s.kt)("h3",{id:"services"},"Services"),(0,s.kt)("p",null,"The services concern are operating on a DTO, preventing the leaking of persistence details to the API."),(0,s.kt)("p",null," In ",(0,s.kt)("inlineCode",{parentName:"p"},"nestjs-query")," services can be composed. In the case of assemblers information is translated using the assembler and delegated to an underlying service."),(0,s.kt)("p",null," This alleviates any awkwardness around passing in a DTO and receiving a different object type back. Instead, your service can use an assembler to alleviate these concerns."),(0,s.kt)("h3",{id:"assemblers"},"Assemblers"),(0,s.kt)("p",null,"The assembler provides a single, testable, place to provide a translation between the DTO and entity, and vice versa."),(0,s.kt)("h3",{id:"why-not-use-the-assembler-in-the-resolver"},"Why not use the assembler in the resolver?"),(0,s.kt)("p",null,"The resolvers concern is translating graphql requests into the specified DTO."),(0,s.kt)("p",null,"The services concern is accepting and returning a DTO based contract. Then using an assembler to translate between the DTO and underlying entities."),(0,s.kt)("p",null,"If you follow this pattern you ",(0,s.kt)("strong",{parentName:"p"},"could")," use the same service with other transports (rest, microservices, etc) as long as the request can be translated into a DTO."),(0,s.kt)("h2",{id:"classtransformerassembler"},"ClassTransformerAssembler"),(0,s.kt)("p",null,"In most cases the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/typestack/class-transformer"},"class-transformer")," package will properly map back and forth. Because of this there is a ",(0,s.kt)("inlineCode",{parentName:"p"},"ClassTransformerAssembler")," that leverages the ",(0,s.kt)("inlineCode",{parentName:"p"},"plainToClass")," method."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE")," The ",(0,s.kt)("inlineCode",{parentName:"p"},"ClassTransformerAssembler")," is the default implementation if an ",(0,s.kt)("inlineCode",{parentName:"p"},"Assembler")," is not manually defined."),(0,s.kt)("p",null,"If you find yourself in a scenario where you need to compute values and you dont want to add the business logic to your DTO you can extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"ClassTransformerAssembler"),"."),(0,s.kt)("p",null,"Lets take a simple example, where we have ",(0,s.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")," and we want to compute the ",(0,s.kt)("inlineCode",{parentName:"p"},"age"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.assembler.ts"',title:'"todo-item.assembler.ts"'},"import { Assembler, ClassTransformerAssembler } from '@ptc-org/nestjs-query-core';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n// `@Assembler` decorator will register the assembler with `nestjs-query` and\n// the QueryService service will be able to auto discover it.\n@Assembler(TodoItemDTO, TodoItemEntity)\nexport class TodoItemAssembler extends ClassTransformerAssembler<TodoItemDTO, TodoItemEntity> {\n  convertToDTO(entity: TodoItemEntity): TodoItemDTO {\n    const dto = super.convertToDTO(entity);\n    // compute the age\n    dto.age = Date.now() - entity.created.getMilliseconds();\n    return dto;\n  }\n}\n")),(0,s.kt)("p",null,"While this example is fairly trivial, the same pattern should apply for more complex scenarios."),(0,s.kt)("h2",{id:"abstractassembler"},"AbstractAssembler"),(0,s.kt)("p",null,"To create your own ",(0,s.kt)("inlineCode",{parentName:"p"},"Assembler")," extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractAssembler"),"."),(0,s.kt)("p",null,"Lets assume we have the following ",(0,s.kt)("inlineCode",{parentName:"p"},"UserDTO"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.dto.ts"',title:'"user.dto.ts"'},"import { FilterableField } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType } from '@nestjs/graphql';\n\n@ObjectType('User')\nclass UserDTO {\n  @FilterableField()\n  firstName!: string;\n\n  @FilterableField()\n  lastName!: string;\n\n  @FilterableField()\n  emailAddress!: string;\n}\n\n")),(0,s.kt)("p",null,"But you inherited a DB schema that has names that are not as user friendly."),(0,s.kt)(l.Z,{defaultValue:"typeorm",groupId:"orm",values:[{label:"TypeOrm",value:"typeorm"},{label:"Sequelize",value:"sequelize"},{label:"Mongoose",value:"mongoose"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"typeorm",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.entity.ts"',title:'"user.entity.ts"'},"import {Entity, Column} from 'typeorm'\n\n@Entity()\nclass UserEntity {\n  @Column()\n  first!: string;\n\n  @Column()\n  last!: string;\n\n  @Column()\n  email!: string;\n}\n"))),(0,s.kt)(o.Z,{value:"sequelize",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.entity.ts"',title:'"user.entity.ts"'},"import { Table, Column, Model } from 'sequelize-typescript';\n\n@Table\nexport class UserEntity extends Model<UserEntity, Partial<UserEntity>> {\n   @Column\n   first!: string;\n\n   @Column\n   last!: string;\n\n   @Column\n   email!: string;\n}\n\n"))),(0,s.kt)(o.Z,{value:"mongoose",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.entity.ts"',title:'"user.entity.ts"'},"import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class UserEntity extends Document {\n  @Prop({ required: true })\n  first!: string;\n\n  @Prop({ required: true })\n  last!: string;\n\n  @Prop({ required: true })\n  email!: string;\n}\n\nexport const UserEntityEntitySchema = SchemaFactory.createForClass(UserEntity);\n\n")))),(0,s.kt)("p",null,"To properly translate the ",(0,s.kt)("inlineCode",{parentName:"p"},"UserDTO")," into the ",(0,s.kt)("inlineCode",{parentName:"p"},"UserEntity")," and back you can extend an ",(0,s.kt)("inlineCode",{parentName:"p"},"Assembler")," that the ",(0,s.kt)("inlineCode",{parentName:"p"},"QueryService")," will use."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.assembler.ts"',title:'"user.assembler.ts"'},"import {\n  AbstractAssembler,\n  Assembler,\n  Query,\n  transformQuery,\n  transformAggregateQuery,\n  transformAggregateResponse\n} from '@ptc-org/nestjs-query-core';\nimport { UserDTO } from './dto/user.dto';\nimport { UserEntity } from './user.entity';\n\n// `@Assembler` decorator will register the assembler with `nestjs-query` and\n// the QueryService service will be able to auto discover it.\n@Assembler(UserDTO, UserEntity)\nexport class UserAssembler extends AbstractAssembler<UserDTO, UserEntity> {\n  convertQuery(query: Query<UserDTO>): Query<UserEntity> {\n    return transformQuery(query, {\n      firstName: 'first',\n      lastName: 'last',\n      emailAddress: 'email',\n    });\n  }\n\n  convertToDTO(entity: UserEntity): UserDTO {\n    const dto = new UserDTO();\n    dto.firstName = entity.first;\n    dto.lastName = entity.last;\n    return dto;\n  }\n\n  convertToEntity(dto: UserDTO): UserEntity {\n    const entity = new UserEntity();\n    entity.first = dto.firstName;\n    entity.last = dto.lastName;\n    return entity;\n  }\n\n  convertAggregateQuery(aggregate: AggregateQuery<TestDTO>): AggregateQuery<TestEntity> {\n     return transformAggregateQuery(aggregate, {\n       firstName: 'first',\n       lastName: 'last',\n       emailAddress: 'email',\n    });\n  }\n\n  convertAggregateResponse(aggregate: AggregateResponse<TestEntity>): AggregateResponse<TestDTO> {\n    return transformAggregateResponse(aggregate, {\n      first: 'firstName',\n      last: 'lastName',\n      email: 'emailAddress'\n    });\n  }\n\n  convertToCreateEntity({firstName, lastName}: DeepPartial<TestDTO>): DeepPartial<TestEntity> {\n    return {\n      first: firstName,\n      last: lastName,\n    };\n  }\n\n  convertToUpdateEntity({firstName, lastName}: DeepPartial<TestDTO>): DeepPartial<TestEntity> {\n    return {\n      first: firstName,\n      last: lastName,\n    };\n  }\n}\n\n")),(0,s.kt)("p",null,"The first thing to look at is the ",(0,s.kt)("inlineCode",{parentName:"p"},"@Assembler")," decorator. It will register the assembler with ",(0,s.kt)("inlineCode",{parentName:"p"},"nestjs-query")," so ",(0,s.kt)("inlineCode",{parentName:"p"},"QueryServices")," can look it up later."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@Assembler(UserDTO, UserEntity)\n")),(0,s.kt)("h3",{id:"converting-the-query"},"Converting the Query"),(0,s.kt)("p",null,"Next the ",(0,s.kt)("inlineCode",{parentName:"p"},"convertQuery")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertQuery(query: Query<UserDTO>): Query<UserEntity> {\n  return transformQuery(query, {\n    firstName: 'first',\n    lastName: 'last',\n    emailAddress: 'email',\n  });\n}\n")),(0,s.kt)("p",null,"This method leverages the ",(0,s.kt)("inlineCode",{parentName:"p"},"transformQuery")," function from ",(0,s.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-core"),". This method will remap all fields specified in the field map to correct field name."),(0,s.kt)("p",null,"In this example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  filter: {\n    firstName: { eq: 'Bob' },\n    lastName: { eq: 'Yukon' },\n    emailAddress: { eq: 'bob@yukon.com' }\n  }\n}\n")),(0,s.kt)("p",null,"Would be transformed into."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  filter: {\n    first: { eq: 'Bob' },\n    last: { eq: 'Yukon' },\n    email: { eq: 'bob@yukon.com' }\n  }\n}\n")),(0,s.kt)("h3",{id:"converting-the-dto"},"Converting the DTO"),(0,s.kt)("p",null,"The next piece is the ",(0,s.kt)("inlineCode",{parentName:"p"},"convertToDTO"),", which will convert the entity into a the correct DTO."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertToDTO(entity: UserEntity): UserDTO {\n  const dto = new UserDTO();\n  dto.firstName = entity.first;\n  dto.lastName = entity.last;\n  return dto;\n}\n")),(0,s.kt)("h3",{id:"converting-the-entity"},"Converting the Entity"),(0,s.kt)("p",null,"The next piece is the ",(0,s.kt)("inlineCode",{parentName:"p"},"convertToEntity"),", which will convert the DTO into a the correct entity."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertToEntity(dto: UserDTO): UserEntity {\n  const entity = new UserEntity();\n  entity.first = dto.firstName;\n  entity.last = dto.lastName;\n  return entity;\n}\n")),(0,s.kt)("h3",{id:"converting-aggregate-query"},"Converting Aggregate Query"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"convertAggregateQuery")," is used to convert an ",(0,s.kt)("inlineCode",{parentName:"p"},"AggregateQuery"),". This examples uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"transformAggregateQuery")," helper to map aggregate query fields."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertAggregateQuery(aggregate: AggregateQuery<TestDTO>): AggregateQuery<TestEntity> {\n   return transformAggregateQuery(aggregate, {\n     firstName: 'first',\n     lastName: 'last',\n     emailAddress: 'email',\n  });\n}\n")),(0,s.kt)("h3",{id:"converting-aggregate-response"},"Converting Aggregate Response"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"convertAggregateResponse")," is used to convert an ",(0,s.kt)("inlineCode",{parentName:"p"},"AggregateResponse"),". This examples uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"transformAggregateResponse")," helper to map aggregate response fields."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertAggregateResponse(aggregate: AggregateResponse<TestEntity>): AggregateResponse<TestDTO> {\n  return transformAggregateResponse(aggregate, {\n    first: 'firstName',\n    last: 'lastName',\n    email: 'emailAddress'\n  });\n}\n")),(0,s.kt)("h3",{id:"converting-create-dto"},"Converting Create DTO"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"convertToCreateEntity")," is used to convert an incoming create DTO to the appropriate create entity, in this case\npartial."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertToCreateEntity({firstName, lastName}: DeepPartial<TestDTO>): DeepPartial<TestEntity> {\n  return {\n    first: firstName,\n    last: lastName,\n  };\n}\n")),(0,s.kt)("h3",{id:"converting-update-dto"},"Converting Update DTO"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"convertToUpdateEntity")," is used to convert an incoming update DTO to the appropriate update entity, in this case a\npartial."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"convertToUpdateEntity({firstName, lastName}: DeepPartial<TestDTO>): DeepPartial<TestEntity> {\n  return {\n    first: firstName,\n    last: lastName,\n  };\n}\n")),(0,s.kt)("p",null,"This is a pretty basic example but the same pattern should apply to more complex scenarios."),(0,s.kt)("h2",{id:"assemblerqueryservice"},"AssemblerQueryService"),(0,s.kt)("p",null,"An ",(0,s.kt)("inlineCode",{parentName:"p"},"AssemblerQueryService")," is a special type of ",(0,s.kt)("inlineCode",{parentName:"p"},"QueryService")," that uses the Assembler to translate between the DTO and Entity."),(0,s.kt)("p",null,"The easiest way to create an ",(0,s.kt)("inlineCode",{parentName:"p"},"AssemblerQueryService")," is to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"@InjectAssemblerQueryService")," decorator."),(0,s.kt)("p",null,"Before using the decorator you need to register your Assembler with ",(0,s.kt)("inlineCode",{parentName:"p"},"nestjs-query")),(0,s.kt)("h3",{id:"module"},"Module"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.module.ts" {10}',title:'"user.module.ts"',"{10}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { Module } from '@nestjs/common';\nimport { UserDTO } from './user.dto';\n\n@Module({\n  providers: [TodoItemResolver],\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [ /* set up your entity with a nestjs-query persitence package */],\n      assemblers: [UserAssembler],\n      resolvers: [ ],\n    }),\n  ],\n})\nexport class UserModule {}\n\n")),(0,s.kt)("h3",{id:"auto-generated-resolver"},"Auto Generated Resolver"),(0,s.kt)("p",null,"If you want your assembler to be used by the auto-generated resolver you can specify the ",(0,s.kt)("inlineCode",{parentName:"p"},"AssemblerClass")," option."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.module.ts" {10,14}',title:'"user.module.ts"',"{10,14}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { Module } from '@nestjs/common';\nimport { UserDTO } from './user.dto';\n\n@Module({\n  providers: [TodoItemResolver],\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [ /* set up your entity with a nestjs-query persitence package */],\n      assemblers: [UserAssembler],\n      resolvers: [\n        {\n          DTOClass: UserDTO,\n          AssemblerClass: UserAssembler\n        }\n      ],\n    }),\n  ],\n})\nexport class UserModule {}\n\n")),(0,s.kt)("h3",{id:"manual-resolver"},"Manual Resolver"),(0,s.kt)("p",null,"If you are manually defining you resolver or want to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"AssemblerQueryService")," in another service use the ",(0,s.kt)("inlineCode",{parentName:"p"},"@InjectAssemblerQueryService")," decorator."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.resolver.ts" {8}',title:'"user.resolver.ts"',"{8}":!0},"import { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { UserDTO } from './user.dto';\nimport { UserAssembler } from './user.assembler'\n\n@Resolver(() => UserDTO)\nexport class UserResolver extends CRUDResolver(UserDTO) {\n  constructor(@InjectAssemblerQueryService(UserAssembler) readonly service: QueryService<UserDTO>) {\n    super(service);\n  }\n}\n")),(0,s.kt)("p",null,"Notice ",(0,s.kt)("inlineCode",{parentName:"p"},"QueryService<UserDTO>"),"."))}v.isMDXComponent=!0}}]);