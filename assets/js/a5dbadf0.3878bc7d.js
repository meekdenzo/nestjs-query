"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[8500],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>y});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(o),c=r,y=d["".concat(s,".").concat(c)]||d[c]||u[c]||a;return o?n.createElement(y,l(l({ref:t},p),{},{components:o})):n.createElement(y,l({ref:t},p))}));function y(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<a;m++)l[m]=o[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}c.displayName="MDXCreateElement"},5162:(e,t,o)=>{o.d(t,{Z:()=>l});var n=o(7294),r=o(4334);const a={tabItem:"tabItem_Ymn6"};function l(e){var t=e.children,o=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,l),hidden:o},t)}},4866:(e,t,o)=>{o.d(t,{Z:()=>N});var n=o(7462),r=o(7294),a=o(4334),l=o(2466),i=o(6550),s=o(1980),m=o(7392),p=o(12);function d(e){return function(e){var t,o;return null!=(t=null==(o=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:o.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function u(e){var t=e.values,o=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:d(o);return function(e){var t=(0,m.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,o])}function c(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function y(e){var t=e.queryString,o=void 0!==t&&t,n=e.groupId,a=(0,i.k6)(),l=function(e){var t=e.queryString,o=void 0!==t&&t,n=e.groupId;if("string"==typeof o)return o;if(!1===o)return null;if(!0===o&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:o,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((function(e){if(l){var t=new URLSearchParams(a.location.search);t.set(l,e),a.replace(Object.assign({},a.location,{search:t.toString()}))}}),[l,a])]}function v(e){var t,o,n,a,l=e.defaultValue,i=e.queryString,s=void 0!==i&&i,m=e.groupId,d=u(e),v=(0,r.useState)((function(){return function(e){var t,o=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(o){if(!c({value:o,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+o+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return o}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:l,tabValues:d})})),h=v[0],k=v[1],T=y({queryString:s,groupId:m}),f=T[0],g=T[1],N=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:m}.groupId),o=(0,p.Nk)(t),n=o[0],a=o[1],[n,(0,r.useCallback)((function(e){t&&a.set(e)}),[t,a])]),I=N[0],C=N[1],b=function(){var e=null!=f?f:I;return c({value:e,tabValues:d})?e:null}();return(0,r.useLayoutEffect)((function(){b&&k(b)}),[b]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!c({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);k(e),g(e),C(e)}),[g,C,d]),tabValues:d}}var h=o(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function T(e){var t=e.className,o=e.block,i=e.selectedValue,s=e.selectValue,m=e.tabValues,p=[],d=(0,l.o5)().blockElementScrollPositionUntilNextRender,u=function(e){var t=e.currentTarget,o=p.indexOf(t),n=m[o].value;n!==i&&(d(t),s(n))},c=function(e){var t,o=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var n,r=p.indexOf(e.currentTarget)+1;o=null!=(n=p[r])?n:p[0];break;case"ArrowLeft":var a,l=p.indexOf(e.currentTarget)-1;o=null!=(a=p[l])?a:p[p.length-1]}null==(t=o)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":o},t)},m.map((function(e){var t=e.value,o=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:function(e){return p.push(e)},onKeyDown:c,onClick:u},l,{className:(0,a.Z)("tabs__item",k.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===t})}),null!=o?o:t)})))}function f(e){var t=e.lazy,o=e.children,n=e.selectedValue,a=(Array.isArray(o)?o:[o]).filter(Boolean);if(t){var l=a.find((function(e){return e.props.value===n}));return l?(0,r.cloneElement)(l,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function g(e){var t=v(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",k.tabList)},r.createElement(T,(0,n.Z)({},e,t)),r.createElement(f,(0,n.Z)({},e,t)))}function N(e){var t=(0,h.Z)();return r.createElement(g,(0,n.Z)({key:String(t)},e))}},9253:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>m,metadata:()=>d,toc:()=>c});var n=o(7462),r=o(3366),a=(o(7294),o(3905)),l=o(4866),i=o(5162),s=["components"],m={title:"Resolvers",sidebar_label:"Resolvers"},p=void 0,d={unversionedId:"graphql/resolvers",id:"graphql/resolvers",title:"Resolvers",description:"Defining the Resolver",source:"@site/docs/graphql/resolvers.mdx",sourceDirName:"graphql",slug:"/graphql/resolvers",permalink:"/nestjs-query/docs/graphql/resolvers",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/resolvers.mdx",tags:[],version:"current",frontMatter:{title:"Resolvers",sidebar_label:"Resolvers"},sidebar:"docs",previous:{title:"DTOs",permalink:"/nestjs-query/docs/graphql/dtos"},next:{title:"Dataloaders",permalink:"/nestjs-query/docs/graphql/dataloaders"}},u={},c=[{value:"Defining the Resolver",id:"defining-the-resolver",level:2},{value:"Auto Generated Resolver",id:"auto-generated-resolver",level:3},{value:"CRUDResolver",id:"crudresolver",level:3},{value:"Generated Endpoints",id:"generated-endpoints",level:3},{value:"Options",id:"options",level:2},{value:"<code>ResolverOptions</code>",id:"resolveroptions",level:4},{value:"Examples",id:"examples",level:2},{value:"Create and Update DTOs.",id:"create-and-update-dtos",level:3},{value:"Example",id:"example",level:4},{value:"Disabling Endpoints.",id:"disabling-endpoints",level:3},{value:"Guards, Pipes, Filters, and Interceptors",id:"guards-pipes-filters-and-interceptors",level:3},{value:"Override Endpoint Name",id:"override-endpoint-name",level:3},{value:"Individual Resolvers",id:"individual-resolvers",level:2},{value:"<code>CreateResolver</code>",id:"createresolver",level:3},{value:"<code>ReadResolver</code>",id:"readresolver",level:3},{value:"<code>UpdateResolver</code>",id:"updateresolver",level:3},{value:"<code>DeleteResolver</code>",id:"deleteresolver",level:3},{value:"Custom Endpoints",id:"custom-endpoints",level:2}],y={toc:c},v="wrapper";function h(e){var t=e.components,o=(0,r.Z)(e,s);return(0,a.kt)(v,(0,n.Z)({},y,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"defining-the-resolver"},"Defining the Resolver"),(0,a.kt)("h3",{id:"auto-generated-resolver"},"Auto Generated Resolver"),(0,a.kt)("p",null,"The easiest way to get started is to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@NestjsQueryGraphQLModule"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," will automatically create a CRUDResolver for you."),(0,a.kt)(l.Z,{defaultValue:"typeorm",groupId:"orm",values:[{label:"TypeOrm",value:"typeorm"},{label:"Sequelize",value:"sequelize"},{label:"Mongoose",value:"mongoose"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"typeorm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"sequelize",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQuerySequelizeModule } from '@ptc-org/nestjs-query-sequelize';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQuerySequelizeModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"mongoose",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryMongooseModule } from '@ptc-org/nestjs-query-mongoose';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [\n        NestjsQueryMongooseModule.forFeature([\n          { document: TodoItemEntity, name: TodoItemEntity.name, schema: TodoItemEntitySchema },\n        ]),\n      ],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")))),(0,a.kt)("h3",{id:"crudresolver"},"CRUDResolver"),(0,a.kt)("p",null,"If you want to override auto generated queries or mutations you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," to manually define your\nresolver."),(0,a.kt)("p",null,"Resolvers work the same as they do in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/graphql/resolvers-map"},(0,a.kt)("inlineCode",{parentName:"a"},"@nestjs/graphql"))," by annotating\nyour class with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Resolver"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"}," In this example the DTO and entity are the same shape, if you have a case where they are different or have computed\nfields check out ",(0,a.kt)("a",{parentName:"p",href:"/nestjs-query/docs/concepts/advanced/assemblers"},"Assemblers")," to understand how to convert to and from the\nDTO/Entity.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Resolver")," decorator from ",(0,a.kt)("inlineCode",{parentName:"p"},"@nestjs/graphql")," you must use the following"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Resolver(() => DTOClass)\n")),(0,a.kt)("p",{parentName:"admonition"},"otherwise relations will not work.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver, Query, Args } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n\n")),(0,a.kt)("p",null,"To ensure that all the correct providers are setup (e.g. hooks, assemblers, and authorizers) you also need to\nregister your DTOs with the ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule"),"."),(0,a.kt)("p",null,"Notice how the ",(0,a.kt)("inlineCode",{parentName:"p"},"dtos")," property is specified instead of the resolvers, this allows you to specify your ",(0,a.kt)("inlineCode",{parentName:"p"},"DTOClass"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"CreateDTOClass"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateDTOClass")," without creating an auto-generated resolver."),(0,a.kt)(l.Z,{defaultValue:"typeorm",groupId:"orm",values:[{label:"TypeOrm",value:"typeorm"},{label:"Sequelize",value:"sequelize"},{label:"Mongoose",value:"mongoose"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"typeorm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts" {9,13}',title:'"todo-item.module.ts"',"{9,13}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemResolver } from './todo-item.resolver'\n\n@Module({\n  providers: [TodoItemResolver]\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      dtos: [{ DTOClass: TodoItemDTO }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"sequelize",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts" {9,13}',title:'"todo-item.module.ts"',"{9,13}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQuerySequelizeModule } from '@ptc-org/nestjs-query-sequelize';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemResolver } from './todo-item.resolver'\n\n@Module({\n  providers: [TodoItemResolver]\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQuerySequelizeModule.forFeature([TodoItemEntity])],\n      dtos: [{ DTOClass: TodoItemDTO }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"mongoose",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts" {9,17}',title:'"todo-item.module.ts"',"{9,17}":!0},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryMongooseModule } from '@ptc-org/nestjs-query-mongoose';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemResolver } from './todo-item.resolver'\n\n@Module({\n  providers: [TodoItemResolver]\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [\n        NestjsQueryMongooseModule.forFeature([\n          { document: TodoItemEntity, name: TodoItemEntity.name, schema: TodoItemEntitySchema },\n        ]),\n      ],\n      dtos: [{ DTOClass: TodoItemDTO }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")))),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"All of the subsequent examples omit the module definition for custom resolvers but you should still register your\nDTOs to ensure all the providers are set up properly.")),(0,a.kt)("h3",{id:"generated-endpoints"},"Generated Endpoints"),(0,a.kt)("p",null,"When using the auto-generated resolver or extending ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," the methods that will be exposed for the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")," are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"todoItem")," - Find a single ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItem")," by id."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"todoItems")," - Filter, sort, and page ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItems")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createOneTodoItem")," - Create a single ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItem")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createManyTodoItems")," - Create multiple ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItems"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"updateOneTodoItem")," - Update a single ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItem")," by id."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"updateManyTodoItems")," - Update multiple ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItems")," using a filter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deleteOneTodoItem")," - Delete a single ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItem")," by id."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deleteManyTodoItems")," - Delete multiple ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItems")," using a filter.")),(0,a.kt)("p",null,"You can read more about the methods in the ",(0,a.kt)("a",{parentName:"p",href:"./queries/endpoints"},"Queries")," and ",(0,a.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/mutations"},"Mutations")," docs."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("p",null,"When using ",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUDResolver")," you can define a number of options to control your endpoints."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"CreateDTOClass")," - The input DTO to use for create mutations. See ",(0,a.kt)("a",{parentName:"p",href:"#create-and-update-dtos"},"Create and Update DTOs"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"UpdateDTOClass")," - The input DTO to use for update mutations. See ",(0,a.kt)("a",{parentName:"p",href:"#create-and-update-dtos"},"Create and Update DTOs"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"enableSubscriptions?")," - Set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to enable graphql subscriptions. See ",(0,a.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/subscriptions"},"Subscriptions"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"enableAggregate?")," - When set to true an aggregate query will be enabled on the type and all relations (unless the explicitly disable it). See ",(0,a.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/aggregations"},"Aggregation"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"create")," - In addition to ",(0,a.kt)("a",{parentName:"p",href:"#resolveroptions"},(0,a.kt)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CreateDTOClass")," - The input DTO to use for create mutations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CreateOneInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for create one mutations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CreateManyInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for create many mutations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"read")," - In addition to ",(0,a.kt)("a",{parentName:"p",href:"#resolveroptions"},(0,a.kt)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"QueryArgs")," - Specify to override the auto-generated ",(0,a.kt)("inlineCode",{parentName:"li"},"ArgsType")," to use to filter records in ",(0,a.kt)("inlineCode",{parentName:"li"},"queryMany")," endpoint."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"update")," - In addition to ",(0,a.kt)("a",{parentName:"p",href:"#resolveroptions"},(0,a.kt)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UpdateDTOClass")," - The input DTO to use for update mutations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UpdateOneInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for update one mutations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UpdateManyInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for update many mutations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"delete")," - In addition to ",(0,a.kt)("a",{parentName:"p",href:"#resolveroptions"},(0,a.kt)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DeleteOneInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for delete one mutations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DeleteManyInput")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"InputType")," to use for delete many mutations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"aggregate")," - In addition to ",(0,a.kt)("a",{parentName:"p",href:"#resolveroptions"},(0,a.kt)("inlineCode",{parentName:"a"},"ResolverOptions"))," you can also specify the following"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enabled")," - Set to true to enable aggregations. If this is used in place of the root ",(0,a.kt)("inlineCode",{parentName:"li"},"enableAggregate")," option relations will not have aggregate queries exposed.")))),(0,a.kt)("h4",{id:"resolveroptions"},(0,a.kt)("inlineCode",{parentName:"h4"},"ResolverOptions")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"update"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," options above all accept the following options."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dtoName")," - Set to override the default name (the name passed to ",(0,a.kt)("inlineCode",{parentName:"li"},"@ObjectType")," or the name of the class)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable all endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/guards"},"guards")," to add to all endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/interceptors"},"interceptors")," to add to all endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/pipes"},"pipes")," to add to all endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/exception-filters"},"filters")," to add to all endpoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",(0,a.kt)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enableSubscriptions?")," - Set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to enable graphql subscriptions. See ",(0,a.kt)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/subscriptions"},"Subscriptions"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"one"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"many")," - Both the ",(0,a.kt)("inlineCode",{parentName:"li"},"one")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"many")," accept the following options:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name?")," - Override the endpoint name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"disabled=false")," - Set to true to disable the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enableSubscriptions?")," - Set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to enable graphql subscriptions. See ",(0,a.kt)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/subscriptions"},"Subscriptions"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/guards"},"guards")," to add to the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/interceptors"},"interceptors")," to add to the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/pipes"},"pipes")," to add to the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/exception-filters"},"filters")," to add to the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",(0,a.kt)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint.")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"create-and-update-dtos"},"Create and Update DTOs."),(0,a.kt)("p",null,"There may be times when you want to specify certain validation or only allow certain fields when updating or\ncreating records."),(0,a.kt)("p",null,"To allow for this you can specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateDTOClass")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateDTOClass")," options."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example we'll create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemInputDTO")," that adds validation and limits the fields you can modify."),(0,a.kt)("p",null,"Assume we have the following class ",(0,a.kt)("inlineCode",{parentName:"p"},"todo-item.input.ts")," which omits the ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"created"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"updated")," fields from\nthe original DTO."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.input.ts"',title:'"todo-item.input.ts"'},"import { Field, InputType } from '@nestjs/graphql';\nimport { IsString, Length } from 'class-validator';\n\n@InputType('TodoItemInput')\nexport class TodoItemInputDTO {\n  @Field()\n  // ensure it is a string field\n  @IsString()\n  // min length of 5 and max of 5 characters\n  @Length(5, 50)\n  title!: string;\n\n  @Field()\n  completed!: boolean;\n}\n")),(0,a.kt)("p",null,"We can then update our resolver to use the new ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemInputDTO")),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemInputDTO } from './todo-item.input';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        CreateDTOClass: TodoItemInputDTO,\n        UpdateDTOClass: TodoItemInputDTO,\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemInputDTO } from './todo-item.input';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  CreateDTOClass: TodoItemInputDTO,\n  UpdateDTOClass: TodoItemInputDTO,\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"disabling-endpoints"},"Disabling Endpoints."),(0,a.kt)("p",null,"There may be scenarios where you wish to disable certain methods."),(0,a.kt)("p",null,"Using the ",(0,a.kt)("a",{parentName:"p",href:"#options"},"options")," describe above we can disable different actions."),(0,a.kt)("p",null,"In this example we disable all ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," endpoints"),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { disabled: true }\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { disabled: true },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("p",null,"You can also disable individual endpoints."),(0,a.kt)("p",null,"In this example we disable all ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," mutations. This will prevent ",(0,a.kt)("inlineCode",{parentName:"p"},"createManyTodoItems"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"updateManyTodoItems"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"deleteManyTodoItems")," from being exposed in the graphql schema."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE")," The same pattern applies for disabling the ",(0,a.kt)("inlineCode",{parentName:"p"},"one")," endpoints."),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { many: { disabled: true } },\n        update: { many: { disabled: true } },\n        delete: { many: { disabled: true } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { disabled: true } },\n  update: { many: { disabled: true } },\n  delete: { many: { disabled: true } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"guards-pipes-filters-and-interceptors"},"Guards, Pipes, Filters, and Interceptors"),(0,a.kt)("p",null,"In this section we'll just demonstrate using a ",(0,a.kt)("inlineCode",{parentName:"p"},"guard")," but the same pattern applies for ",(0,a.kt)("inlineCode",{parentName:"p"},"pipes"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"filters")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"interceptors")),(0,a.kt)("p",null,"To set up a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/guards"},"guard")," for endpoint you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"guards")," option."),(0,a.kt)("p",null,"Assume we have the following auth guard that checks for a certain header and value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.guard.ts"',title:'"auth.guard.ts"'},"import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AUTH_HEADER_NAME } from './constants';\nimport { config } from './config';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const ctx = GqlExecutionContext.create(context);\n    const req = ctx.getContext().request;\n    this.logger.log(`Req = ${req.headers}`);\n    return req.headers[AUTH_HEADER_NAME] === config.auth.header;\n  }\n}\n")),(0,a.kt)("p",null,"We can then add it to each of our mutation endpoints"),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { guards },\n        update: { guards },\n        delete: { guards },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { guards },\n  update: { guards },\n  delete: { guards },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("p",null,"Now any requests that go to a ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," method will require the guard."),(0,a.kt)("p",null,"You can also apply to individual methods using the ",(0,a.kt)("inlineCode",{parentName:"p"},"one")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," fields. For example lets put a guard on all many\nmutations."),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        create: { many: { guards } },\n        update: { many: { guards } },\n        delete: { many: { guards } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\nconst guards = [AuthGuard];\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  create: { many: { guards } },\n  update: { many: { guards } },\n  delete: { many: { guards } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"override-endpoint-name"},"Override Endpoint Name"),(0,a.kt)("p",null,"If you find yourself in a situation where you want to override an endpoint name you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"one.name")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"many.name")," options to override"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These options are available for the ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"update"),", and 'delete' endpoints.")),(0,a.kt)("p",null,"In this example we'll change the ",(0,a.kt)("inlineCode",{parentName:"p"},"todoItem")," query to ",(0,a.kt)("inlineCode",{parentName:"p"},"findTodoItem")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"todoItems")," endpoint to ",(0,a.kt)("inlineCode",{parentName:"p"},"queryForTodoItems"),"."),(0,a.kt)(l.Z,{defaultValue:"module",values:[{label:"NestjsQueryGraphQLModule",value:"module"},{label:"CRUDResolver",value:"resolver"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"module",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.module.ts"',title:'"todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{\n        DTOClass: TodoItemDTO,\n        EntityClass: TodoItemEntity,\n        read: { one: { name: 'findTodoItem' }, many: { name: 'queryForTodoItems' } },\n      }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n"))),(0,a.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CRUDResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CRUDResolver(TodoItemDTO, {\n  read: { one: { name: 'findTodoItem' }, many: { name: 'queryForTodoItems' } },\n}) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")))),(0,a.kt)("h2",{id:"individual-resolvers"},"Individual Resolvers"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-graphql")," package exposes each part of ",(0,a.kt)("inlineCode",{parentName:"p"},"CRUD")," into individual mixins and resolvers allowing you\nto pick and choose what functionality you want to expose."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This is advanced usage of the resolvers API and is subject to change!"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"All examples below can be achieved with resolver options."),(0,a.kt)("li",{parentName:"ul"},"The following resolvers do not expose relations options, to add relations options see ",(0,a.kt)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/relations#relatable"},"Relateable")))),(0,a.kt)("h3",{id:"createresolver"},(0,a.kt)("inlineCode",{parentName:"h3"},"CreateResolver")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateResolver")," will only expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"createOne")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"createMany")," endpoints. The ",(0,a.kt)("a",{parentName:"p",href:"#options"},"options")," described for\n",(0,a.kt)("inlineCode",{parentName:"p"},"create")," can be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateResolver")),(0,a.kt)("p",null,"For example the following resolver will expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"createOneTodoItem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"createManyTodoItems")," mutations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { CreateResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends CreateResolver(TodoItemDTO) {\n  constructor(\n      @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"readresolver"},(0,a.kt)("inlineCode",{parentName:"h3"},"ReadResolver")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadResolver")," will only expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"findById")," endpoints. The ",(0,a.kt)("a",{parentName:"p",href:"#options"},"options")," described for ",(0,a.kt)("inlineCode",{parentName:"p"},"read"),"\ncan be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadResolver")),(0,a.kt)("p",null,"For example the following resolver will expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"todoItems")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"todoItem")," queries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { ReadResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends ReadResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"updateresolver"},(0,a.kt)("inlineCode",{parentName:"h3"},"UpdateResolver")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateResolver")," will only expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateOne")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"updateMany")," endpoints. The ",(0,a.kt)("a",{parentName:"p",href:"#options"},"options")," described for\n",(0,a.kt)("inlineCode",{parentName:"p"},"update")," can be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"UpdateResolver")),(0,a.kt)("p",null,"For example the following resolver will expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { UpdateResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends UpdateResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"deleteresolver"},(0,a.kt)("inlineCode",{parentName:"h3"},"DeleteResolver")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteResolver")," will only expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteOne")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteMany")," endpoints. The ",(0,a.kt)("a",{parentName:"p",href:"#options"},"options")," described for\n",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," can be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteResolver")),(0,a.kt)("p",null,"For example the following resolver will expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateOneTodoItem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"updateManyTodoItems")," mutations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { QueryService, InjectQueryService } from '@ptc-org/nestjs-query-core';\nimport { DeleteResolver } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Resolver()\nexport class TodoItemResolver extends DeleteResolver(TodoItemDTO) {\n  constructor(\n    @InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>\n  ) {\n    super(service);\n  }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"custom-endpoints"},"Custom Endpoints"),(0,a.kt)("p",null,"You can also create custom methods."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Unless you are overriding an endpoint you DO NOT need to extend the crud resolver directly, instead you can create a\nnew resolver for your type and add the new endpoint. ",(0,a.kt)("inlineCode",{parentName:"p"},"@nestjs/graphql")," will handle merging the two resolver into one.")),(0,a.kt)("p",null,"Lets create a new query endpoint that only returns completed ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItems"),"."),(0,a.kt)("p",null,"First create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"types.ts"),". And add the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="types.ts"',title:'"types.ts"'},"import { QueryArgsType } from '@ptc-org/nestjs-query-graphql';\nimport { ArgsType } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\n\n\n@ArgsType()\nexport class TodoItemQuery extends QueryArgsType(TodoItemDTO) {}\nexport const TodoItemConnection = TodoItemQuery.ConnectionType;\n")),(0,a.kt)("p",null,"In the code above we export two types. ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemConnection")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemQuery"),". Because of the way ",(0,a.kt)("inlineCode",{parentName:"p"},"@nestjs/graphql")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"nest")," work we need to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryArgsType")," so that it will know the type to serialize into."),(0,a.kt)("p",null,"In your resolver you can now create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"completedTodoItems")," method with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item.resolver.ts"',title:'"todo-item.resolver.ts"'},"import { Filter, InjectAssemblerQueryService, QueryService } from '@ptc-org/nestjs-query-core';\nimport { ConnectionType } from '@ptc-org/nestjs-query-graphql';\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemAssembler } from './todo-item.assembler';\nimport { TodoItemConnection, TodoItemQuery } from './types';\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver {\n  constructor(@InjectQueryService(TodoItemEntity) readonly service: QueryService<TodoItemEntity>) {}\n\n  // Set the return type to the TodoItemConnection\n  @Query(() => TodoItemConnection)\n  completedTodoItems(@Args() query: TodoItemQuery): Promise<ConnectionType<TodoItemDTO>> {\n    // add the completed filter the user provided filter\n    const filter: Filter<TodoItemDTO> = {\n      ...query.filter,\n      ...{ completed: { is: true } },\n    };\n\n    return TodoItemConnection.createFromPromise((q) => this.service.query(q), { ...query, ...{ filter } });\n\n}\n\n\n")),(0,a.kt)("p",null,"Lets break this down so you know what is going on."),(0,a.kt)("p",null,"In the above code we annotate the new method with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Query(() => TodoItemConnection)\n")),(0,a.kt)("p",null,"The return type passed to query lets graphql know what the generated schema type is."),(0,a.kt)("p",null,"The next piece to pay attention to is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"completedTodoItems(@Args() query: TodoItemQuery)\n")),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemQuery")," we created for the arguments type and annotate with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Args")," when you look at the generated\nschema in it will look like."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"completedTodoItems(\n  paging: CursorPaging = {}\n  filter: TodoItemFilter = {}\n  sorting: [TodoItemSort!] = []\n): TodoItemConnection!\n")),(0,a.kt)("p",null,"Notice how there is not a query arg but instead the you see the fields of ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemQuery")," that is because we used\n",(0,a.kt)("inlineCode",{parentName:"p"},"@Args")," without a name and added the ",(0,a.kt)("inlineCode",{parentName:"p"},"@ArgsType")," decorator to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItemQuery"),"."),(0,a.kt)("p",null,"The next piece is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// add the completed filter the user provided filter\nconst filter: Filter<TodoItemDTO> = {\n  ...query.filter,\n  ...{ completed: { is: true } },\n};\n")),(0,a.kt)("p",null,"Here we do a shallow copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter")," and add ",(0,a.kt)("inlineCode",{parentName:"p"},"completed: { is: true }"),". This will override any completed arguments\nthat an end user may have provided to ensure we always query for completed todos."),(0,a.kt)("p",null,"Finally we call create our connection response by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"createFromPromise")," method on the connection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// call the original queryMany method with the new query\nreturn TodoItemConnection.createFromPromise((q) => this.service.query(q), { ...query, ...{ filter } });\n")),(0,a.kt)("p",null,"The last step is to add the resolver to the module, by registering our resolver as a provider and importing the\n",(0,a.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule")," we will get both the auto generated resolver along with the custom endpoints from the\ncustom resolver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-items.module.ts"',title:'"todo-items.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './dto/todo-item.dto';\nimport { TodoItemAssembler } from './todo-item.assembler';\nimport { TodoItemEntity } from './todo-item.entity';\nimport { TodoItemResolver } from './todo-item.resolver';\n\n@Module({\n  providers: [TodoItemResolver],\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      assemblers: [TodoItemAssembler],\n      resolvers: [\n        {\n          DTOClass: TodoItemDTO,\n          EntityClass: TodoItemEntity,\n        },\n      ],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n\n")))}h.isMDXComponent=!0}}]);