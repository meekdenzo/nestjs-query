"use strict";(self.webpackChunknestjs_query=self.webpackChunknestjs_query||[]).push([[2551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=p(n),k=o,c=u["".concat(s,".").concat(k)]||u[k]||m[k]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=k;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:o,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),o=n(4334);const l={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),o=n(7294),l=n(4334),i=n(2466),r=n(6550),s=n(1980),p=n(7392),d=n(12);function u(e){return function(e){var t,n;return null!=(t=null==(n=o.Children.map(e,(function(e){if(!e||(0,o.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,n=e.children;return(0,o.useMemo)((function(){var e=null!=t?t:u(n);return function(e){var t=(0,p.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function k(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function c(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,l=(0,r.k6)(),i=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(i),(0,o.useCallback)((function(e){if(i){var t=new URLSearchParams(l.location.search);t.set(i,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[i,l])]}function b(e){var t,n,a,l,i=e.defaultValue,r=e.queryString,s=void 0!==r&&r,p=e.groupId,u=m(e),b=(0,o.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!k({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:i,tabValues:u})})),T=b[0],g=b[1],h=c({queryString:s,groupId:p}),f=h[0],N=h[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),n=(0,d.Nk)(t),a=n[0],l=n[1],[a,(0,o.useCallback)((function(e){t&&l.set(e)}),[t,l])]),C=y[0],I=y[1],v=function(){var e=null!=f?f:C;return k({value:e,tabValues:u})?e:null}();return(0,o.useLayoutEffect)((function(){v&&g(v)}),[v]),{selectedValue:T,selectValue:(0,o.useCallback)((function(e){if(!k({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);g(e),N(e),I(e)}),[N,I,u]),tabValues:u}}var T=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){var t=e.className,n=e.block,r=e.selectedValue,s=e.selectValue,p=e.tabValues,d=[],u=(0,i.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,n=d.indexOf(t),a=p[n].value;a!==r&&(u(t),s(a))},k=function(e){var t,n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,o=d.indexOf(e.currentTarget)+1;n=null!=(a=d[o])?a:d[0];break;case"ArrowLeft":var l,i=d.indexOf(e.currentTarget)-1;n=null!=(l=d[i])?l:d[d.length-1]}null==(t=n)||t.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((function(e){var t=e.value,n=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:function(e){return d.push(e)},onKeyDown:k,onClick:m},i,{className:(0,l.Z)("tabs__item",g.tabItem,null==i?void 0:i.className,{"tabs__item--active":r===t})}),null!=n?n:t)})))}function f(e){var t=e.lazy,n=e.children,a=e.selectedValue,l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var i=l.find((function(e){return e.props.value===a}));return i?(0,o.cloneElement)(i,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},l.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function N(e){var t=b(e);return o.createElement("div",{className:(0,l.Z)("tabs-container",g.tabList)},o.createElement(h,(0,a.Z)({},e,t)),o.createElement(f,(0,a.Z)({},e,t)))}function y(e){var t=(0,T.Z)();return o.createElement(N,(0,a.Z)({key:String(t)},e))}},8389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>T,frontMatter:()=>p,metadata:()=>u,toc:()=>k});var a=n(7462),o=n(3366),l=(n(7294),n(3905)),i=n(4866),r=n(5162),s=["components"],p={title:"Relations"},d=void 0,u={unversionedId:"graphql/relations",id:"graphql/relations",title:"Relations",description:"When using the nestjs-query you can specify relations that should be exposed for the DTO using the following decorators.",source:"@site/docs/graphql/relations.mdx",sourceDirName:"graphql",slug:"/graphql/relations",permalink:"/nestjs-query/docs/graphql/relations",draft:!1,editUrl:"https://github.com/tripss/nestjs-query/edit/master/documentation/docs/graphql/relations.mdx",tags:[],version:"current",frontMatter:{title:"Relations"},sidebar:"docs",previous:{title:"Subscriptions",permalink:"/nestjs-query/docs/graphql/subscriptions"},next:{title:"Types",permalink:"/nestjs-query/docs/graphql/types"}},m={},k=[{value:"@Relation",id:"relation",level:2},{value:"Example",id:"example",level:3},{value:"@FilterableRelation",id:"filterablerelation",level:2},{value:"Example",id:"example-1",level:3},{value:"@UnPagedRelation",id:"unpagedrelation",level:2},{value:"Example",id:"example-2",level:3},{value:"@FilterableUnPagedRelation",id:"filterableunpagedrelation",level:2},{value:"Example",id:"example-3",level:3},{value:"@OffsetConnection",id:"offsetconnection",level:2},{value:"Example",id:"example-4",level:3},{value:"Total Count Example",id:"total-count-example",level:3},{value:"@FilterableOffsetConnection",id:"filterableoffsetconnection",level:2},{value:"Example",id:"example-5",level:3},{value:"@CursorConnection",id:"cursorconnection",level:2},{value:"Example",id:"example-6",level:3},{value:"Total Count Example",id:"total-count-example-1",level:3},{value:"@FilterableCursorConnection",id:"filterablecursorconnection",level:2},{value:"Example",id:"example-7",level:3},{value:"Virtual Relations",id:"virtual-relations",level:2},{value:"Options",id:"options",level:2},{value:"Custom Relation Name",id:"custom-relation-name",level:3},{value:"GraphQL lookahead",id:"graphql-lookahead",level:3},{value:"Disable Reads",id:"disable-reads",level:3},{value:"Disable <code>filter</code> or <code>sorting</code> in relations",id:"disable-filter-or-sorting-in-relations",level:4},{value:"Enable Updates",id:"enable-updates",level:3},{value:"Enable Removes",id:"enable-removes",level:3},{value:"Guards, Pipes and Filters",id:"guards-pipes-and-filters",level:3},{value:"Relation Mixin",id:"relation-mixin",level:3},{value:"Relatable",id:"relatable",level:4}],c={toc:k},b="wrapper";function T(e){var t=e.components,n=(0,o.Z)(e,s);return(0,l.kt)(b,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"When using the ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," you can specify relations that should be exposed for the DTO using the following decorators."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@Relation")," - A relation that is a single value (one-to-one, many-to-one)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@FilterableRelation")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"@Relation")," that enables filtering the parent by fields of the relation ",(0,l.kt)("inlineCode",{parentName:"li"},"DTO"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@UnPagedRelation")," - An array of relations (e.g, many-to-many, one-to-many) that returns all of the related records."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@FilterableUnPagedRelation")," - An ",(0,l.kt)("inlineCode",{parentName:"li"},"@UnPagedRelation")," that enables filtering the parent by fields of the relation\n",(0,l.kt)("inlineCode",{parentName:"li"},"DTO"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@OffsetConnection")," - A connection that represents a collection (e.g, many-to-many, one-to-many) that uses ",(0,l.kt)("inlineCode",{parentName:"li"},"offset"),"\nbased pagination."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@FilterableOffsetConnection")," - An ",(0,l.kt)("inlineCode",{parentName:"li"},"@OffsetConnection")," that enables filtering the parent by fields of the connection\n",(0,l.kt)("inlineCode",{parentName:"li"},"DTO"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@CursorConnection")," - A connection that represents a collection (e.g, many-to-many, one-to-many) that uses ",(0,l.kt)("inlineCode",{parentName:"li"},"cursor"),"\nbased pagination."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@FilterableCursorConnection")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"@CursorConnection")," that enables filtering the parent by fields of the\nconnection ",(0,l.kt)("inlineCode",{parentName:"li"},"DTO"),".")),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableOffsetConnection"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableCursorConnection")," are not supported by\nmongoose!")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"When loading relations a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/graphql/dataloader"},"dataloader")," that is scoped to the request will be used. This prevents the n+1 problem.")),(0,l.kt)("p",null,"In the following examples we are going to use the following entities."),(0,l.kt)(i.Z,{defaultValue:"todoitementity",values:[{label:"TodoItemEntity",value:"todoitementity"},{label:"SubTaskEntity",value:"subtaskentity"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"todoitementity",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.entity.ts"',title:'"todo-item/todo-item.entity.ts"'},"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn, OneToMany } from 'typeorm';\nimport { SubTaskEntity } from '../sub-task/sub-task.entity';\n\n@Entity()\nexport class TodoItemEntity {\n  @PrimaryGeneratedColumn()\n  id!: string;\n\n  @Column()\n  title!: string;\n\n  @Column()\n  completed!: boolean;\n\n  @OneToMany(\n    () => SubTaskEntity,\n    subTask => subTask.todoItem,\n  )\n  subTasks!: SubTaskEntity[];\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n}\n\n"))),(0,l.kt)(r.Z,{value:"subtaskentity",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.entity.ts"',title:'"sub-task/sub-task.entity.ts"'},"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ObjectType,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { TodoItemEntity } from '../todo-item/todo-item.entity';\n\n@Entity()\nexport class SubTaskEntity {\n  @PrimaryGeneratedColumn()\n  id!: string;\n\n  @Column()\n  title!: string;\n\n  @Column()\n  completed!: boolean;\n\n  @Column({ nullable: false })\n  todoItemId!: string;\n\n  @ManyToOne(\n    (): ObjectType<TodoItemEntity> => TodoItemEntity,\n    td => td.subTasks,\n    { onDelete: 'CASCADE', nullable: false },\n  )\n  @JoinColumn()\n  todoItem!: TodoItemEntity;\n\n  @CreateDateColumn()\n  created!: Date;\n\n  @UpdateDateColumn()\n  updated!: Date;\n}\n\n")))),(0,l.kt)("h2",{id:"relation"},"@Relation"),(0,l.kt)("p",null,"A relation that is a single value (one-to-one, many-to-one)"),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"Based on the entities defined above we can add a ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItem")," relation to the ",(0,l.kt)("inlineCode",{parentName:"p"},"SubTask")," by creating the following ",(0,l.kt)("inlineCode",{parentName:"p"},"SubTaskDTO")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"@Relation")," decorator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',title:'"sub-task/sub-task.dto.ts"',"{6}":!0},"import { FilterableField, IDField, Relation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../todo-item/todo-item.dto.ts';\n\n@ObjectType('SubTask')\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\nexport class SubTaskDTO {\n  @FilterableField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField()\n  todoItemId!: string;\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@Relation")," decorator lets ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," know to expose the following endpoints:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"subTask.todoItem")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," to retrieve the ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks")," ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"setTodoItemOnSubTask")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"mutation")," to set the ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem")," on a ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTask"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"removeTodoItemFromSubTask")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"mutation")," to remove a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"SubTask")," relation.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"NOTE")," This does not typically remove either record just removes the relation.")))),(0,l.kt)("p",null,"To set up the resolver you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',title:'"sub-task/sub-task.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([SubTaskEntity])],\n      resolvers: [{ DTOClass: SubTaskDTO, EntityClass: SubTaskEntity }],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@ptc-org/nestjs-query-graphql")," will then automatically create the following graphql definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type SubTask {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  todoItemId: String!\n  todoItem: TodoItem!\n}\n")),(0,l.kt)("p",null,"The following mutations will also be automatically exposed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n  setTodoItemOnSubTask(input: RelationInput!): SubTask!\n}\n\ninput RelationInput {\n  id: ID!\n  relationId: ID!\n}\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If ",(0,l.kt)("inlineCode",{parentName:"p"},"remove.enabled")," was set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," a ",(0,l.kt)("inlineCode",{parentName:"p"},"removeTodoItemFromSubTask")," mutation would also be exposed with the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"setTodoItemOnSubTask"),".")),(0,l.kt)("h2",{id:"filterablerelation"},"@FilterableRelation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableRelation")," extends the ",(0,l.kt)("inlineCode",{parentName:"p"},"@Relation")," decorator exposing the ability to filter the ",(0,l.kt)("inlineCode",{parentName:"p"},"DTO")," that defines the relation by relation properties."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableRelation")," decorator will ",(0,l.kt)("strong",{parentName:"p"},"only")," work with relations defined by the orm used (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"typeorm"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"sequelize"),"). If your relations are federated or you are using ",(0,l.kt)("inlineCode",{parentName:"p"},"mongoose")," you cannot use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableRelation"),"\ndecorator.")),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("p",null,"In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,l.kt)("inlineCode",{parentName:"p"},"SubTasks")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',title:'"sub-task/sub-task.dto.ts"',"{6}":!0},"import { FilterableField, IDField, FilterableRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { TodoItemDTO } from '../todo-item/todo-item.dto.ts';\n\n@ObjectType('SubTask')\n@FilterableRelation('todoItem', () => TodoItemDTO)\nexport class SubTaskDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n\n  @FilterableField(() => ID)\n  todoItemId!: string;\n}\n")),(0,l.kt)("p",null,"Notice the use of ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableRelation")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"@Relation"),", by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableRelation")," version ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will allow filtering on the ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItem")," relation."),(0,l.kt)("p",null,"The  module definition remains the same."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',title:'"sub-task/sub-task.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { SubTaskDTO } from './sub-task.dto';\nimport { SubTaskEntity } from './sub-task.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([SubTaskEntity])],\n      resolvers: [{ DTOClass: SubTaskDTO, EntityClass: SubTaskEntity }],\n    }),\n  ],\n})\nexport class SubTaskModule {}\n")),(0,l.kt)("p",null,"When querying for ",(0,l.kt)("inlineCode",{parentName:"p"},"SubTasks")," you can now also filter on ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItem")," properties."),(0,l.kt)("p",null,"In this example we'll find all subTasks that are related to a ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItem")," with a title that starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"Created"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  subTasks(filter: { todoItem: { title: { like: "Create%" } } }) {\n    title\n    completed\n  }\n}\n\n')),(0,l.kt)("h2",{id:"unpagedrelation"},"@UnPagedRelation"),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@UnPagedRelation")," decorator to define a relation that does not use paging and returns an array\nof all the related records."),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("p",null,"Based on the entity definition above we can define a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," relation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, UnPagedRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"When specifying a many relation a couple of endpoints will automatically be generated. In this example the following are generated."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"todoItem.subTasks")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," endpoint to retrieve a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItems")," ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," property will accept a ",(0,l.kt)("a",{parentName:"li",href:"/nestjs-query/docs/concepts/queries"},"query")," to allow you to filter, and sort results."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," will be returned as an array of results."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"addSubTasksToTodoItem")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"mutation")," to add ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks")," to a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem"),".")),(0,l.kt)("p",null,"To set up the resolver you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',title:'"todo-item/todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"The generated schema will contain a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItem")," type like the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    filter: SubTaskFilter = {}\n    sorting: [SubTaskSort!] = []\n  ): [SubTask!]!\n}\n")),(0,l.kt)("p",null,"The following mutations will also be automatically exposed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If ",(0,l.kt)("inlineCode",{parentName:"p"},"remove.enabled")," was set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," a ",(0,l.kt)("inlineCode",{parentName:"p"},"removeSubTasksFromTodoItem")," mutation would also be exposed with the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"addSubTasksToTodoItem"),".")),(0,l.kt)("h2",{id:"filterableunpagedrelation"},"@FilterableUnPagedRelation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation")," extends the ",(0,l.kt)("inlineCode",{parentName:"p"},"@UnPagedRelation")," decorator exposing the ability to filter the ",(0,l.kt)("inlineCode",{parentName:"p"},"DTO")," that\ndefines the relation by relation properties."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation")," decorator will ",(0,l.kt)("strong",{parentName:"p"},"only")," work with relations defined by the orm used (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"typeorm"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"sequelize"),"). If your relations are federated or you are using ",(0,l.kt)("inlineCode",{parentName:"p"},"mongoose")," you cannot use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation"),"\ndecorator.")),(0,l.kt)("h3",{id:"example-3"},"Example"),(0,l.kt)("p",null,"In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems"),"\nby ",(0,l.kt)("inlineCode",{parentName:"p"},"SubTasks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.dto.ts" {6}',title:'"sub-task/sub-task.dto.ts"',"{6}":!0},"import { FilterableField, IDField, FilterableUnPagedRelation } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@FilterableUnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n")),(0,l.kt)("p",null,"Notice the use of ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"@UnPagedRelation"),", by using the\n",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableUnPagedRelation")," version ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will allow filtering on the ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," relation."),(0,l.kt)("p",null,"The  module definition remains the same."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sub-task/sub-task.module.ts"',title:'"sub-task/sub-task.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"When querying for ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems")," you can now also filter on ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," properties."),(0,l.kt)("p",null,"In this example we'll find all ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItems")," that are related to a ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," that are completed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n        completed\n        subTasks {\n          title\n          description\n          completed\n        }\n      }\n      cursor\n    }\n  }\n}\n")),(0,l.kt)("h2",{id:"offsetconnection"},"@OffsetConnection"),(0,l.kt)("h3",{id:"example-4"},"Example"),(0,l.kt)("p",null,"Based on the entity definitions above we can create a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")," with a connection to the ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, OffsetConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"When specifying a ",(0,l.kt)("inlineCode",{parentName:"p"},"@OffsetConnection")," relation a couple of endpoints will automatically be generated. In this example\nthe following are generated."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"todoItem.subTasks")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," to retrieve a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItems")," ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," property will accept a ",(0,l.kt)("a",{parentName:"li",href:"/nestjs-query/docs/concepts/queries"},"query")," to allow you to filter, page and sort results."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," property will return a offset based ",(0,l.kt)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/types#connectiontype"},"connection")," to page through\nresults."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"addSubTasksToTodoItem")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"mutation")," to add ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks")," to a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem"),".")),(0,l.kt)("p",null,"To set up the resolver you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',title:'"todo-item/todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"The generated schema will contain a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItem")," type like the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: OffsetPaging = { limit: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n")),(0,l.kt)("p",null,"The following mutations will also be automatically exposed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If ",(0,l.kt)("inlineCode",{parentName:"p"},"remove.enabled")," was set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," a ",(0,l.kt)("inlineCode",{parentName:"p"},"removeSubTasksFromTodoItem")," mutation would also be exposed with the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"addSubTasksToTodoItem"),".")),(0,l.kt)("h3",{id:"total-count-example"},"Total Count Example"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"Enabling ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," can be expensive. If your table is large the ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," query may be expensive, use with caution.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field is not eagerly fetched. It will only be executed if the field is queried from the client.")),(0,l.kt)("p",null,"When using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@OffsetConnection")," decorator you can enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field. The ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field will return the total number of records included in the connection."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, OffsetConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true }, enableTotalCount: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"The generated graphql will include a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemSubTasksConnection")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{19}","{19}":!0},"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: OffsetPaging = { limit: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n\ntype TodoItemSubTasksConnection {\n  pageInfo: OffsetPageInfo!\n  nodes: [SubTask!]!\n  totalCount: Int!\n}\n\n")),(0,l.kt)("h2",{id:"filterableoffsetconnection"},"@FilterableOffsetConnection"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableOffsetConnection")," extends the ",(0,l.kt)("inlineCode",{parentName:"p"},"@OffsetConnection")," decorator exposing the ability to filter the ",(0,l.kt)("inlineCode",{parentName:"p"},"DTO"),"\nthat defines the relation by relation properties."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableOffsetConnection")," decorator will ",(0,l.kt)("strong",{parentName:"p"},"only")," work with relations defined by the orm used (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"typeorm"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"sequelize"),"). If your relations are federated or you are using ",(0,l.kt)("inlineCode",{parentName:"p"},"mongoose")," you cannot use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableConnection"),"\ndecorator.")),(0,l.kt)("h3",{id:"example-5"},"Example"),(0,l.kt)("p",null,"In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {7}',title:'"todo-item/todo-item.dto.ts"',"{7}":!0},"import { FilterableField, IDField, FilterableOffsetConnection, QueryOptions } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@QueryOptions({ pagingStrategy: PagingStrategies.OFFSET })\n@FilterableOffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"Notice the use of ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableOffsetConnection")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"@OffsetConnection"),", by using the\n",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableOffsetConnection")," version ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will allow filtering on the ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," relation."),(0,l.kt)("p",null,"The  module definition remains the same."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',title:'"todo-item/todo-item.module.ts"'},"import { PagingStrategies } from '@ptc-org/nestjs-query-core';\nimport { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"When querying for ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems")," you can now also filter on ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," properties."),(0,l.kt)("p",null,"In this example we'll find all ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItems")," that have ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," that are completed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n    }\n    nodes {\n      id\n      title\n      description\n      completed\n      subTasks {\n        nodes {\n          title\n          description\n          completed\n        }\n      }\n    }\n  }\n}\n")),(0,l.kt)("h2",{id:"cursorconnection"},"@CursorConnection"),(0,l.kt)("h3",{id:"example-6"},"Example"),(0,l.kt)("p",null,"Based on the entity definitions above we can create a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemDTO")," with a connection to the ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, CursorConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"When specifying a ",(0,l.kt)("inlineCode",{parentName:"p"},"@CursorConnection")," relation a couple of endpoints will automatically be generated. In this example\nthe\nfollowing are generated."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"todoItem.subTasks")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," to retrieve a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItems")," ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," property will accept a ",(0,l.kt)("a",{parentName:"li",href:"/nestjs-query/docs/concepts/queries"},"query")," to allow you to filter, page and sort results."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"subTasks")," property will return a cursor based ",(0,l.kt)("a",{parentName:"li",href:"/nestjs-query/docs/graphql/types#connectiontype"},"connection")," to page through\nresults."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"addSubTasksToTodoItem")," - A ",(0,l.kt)("inlineCode",{parentName:"li"},"mutation")," to add ",(0,l.kt)("inlineCode",{parentName:"li"},"SubTasks")," to a ",(0,l.kt)("inlineCode",{parentName:"li"},"TodoItem"),".")),(0,l.kt)("p",null,"To set up the resolver you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"NestjsQueryGraphQLModule"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',title:'"todo-item/todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"The generated schema will contain a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItem")," type like the following."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: CursorPaging = { first: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n")),(0,l.kt)("p",null,"The following mutations will also be automatically exposed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n   addSubTasksToTodoItem(input: RelationsInput!): TodoItem!\n}\n\ninput RelationsInput {\n  id: ID!\n  relationIds: [ID!]!\n}\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If ",(0,l.kt)("inlineCode",{parentName:"p"},"remove.enabled")," was set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," a ",(0,l.kt)("inlineCode",{parentName:"p"},"removeSubTasksFromTodoItem")," mutation would also be exposed with the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"addSubTasksToTodoItem"),".")),(0,l.kt)("h3",{id:"total-count-example-1"},"Total Count Example"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"Enabling ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," can be expensive. If your table is large the ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," query may be expensive, use with caution.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field is not eagerly fetched. It will only be executed if the field is queried from the client.")),(0,l.kt)("p",null,"When using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@CursorConnection")," decorator you can enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field. The ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field will return the total number of records included in the connection."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, Connection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true }, enableTotalCount: true })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"The generated graphql will include a ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemSubTasksConnection")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"totalCount")," field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{19}","{19}":!0},"type TodoItem {\n  id: ID!\n  title: String!\n  completed: Boolean!\n  created: DateTime!\n  updated: DateTime!\n  subTasks(\n    paging: CursorPaging = { first: 10 }\n\n    filter: SubTaskFilter = {}\n\n    sorting: [SubTaskSort!] = []\n  ): TodoItemSubTasksConnection!\n}\n\ntype TodoItemSubTasksConnection {\n  pageInfo: PageInfo!\n  edges: [SubTaskEdge!]!\n  totalCount: Int!\n}\n\n")),(0,l.kt)("h2",{id:"filterablecursorconnection"},"@FilterableCursorConnection"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableCursorConnection")," extends the ",(0,l.kt)("inlineCode",{parentName:"p"},"@CursorConnection")," decorator exposing the ability to filter the ",(0,l.kt)("inlineCode",{parentName:"p"},"DTO")," that defines the relation by relation properties."),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableCursorConnection")," decorator will ",(0,l.kt)("strong",{parentName:"p"},"only")," work with relations defined by the orm used (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"typeorm"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"sequelize"),"). If your relations are federated or you are using ",(0,l.kt)("inlineCode",{parentName:"p"},"mongoose")," you cannot use the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableConnection"),"\ndecorator.")),(0,l.kt)("h3",{id:"example-7"},"Example"),(0,l.kt)("p",null,"In this example we'll use the same Entities defined above to create a graphql endpoint that allows filtering ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.dto.ts" {6}',title:'"todo-item/todo-item.dto.ts"',"{6}":!0},"import { FilterableField, IDField, FilterableCursorConnection } from '@ptc-org/nestjs-query-graphql';\nimport { ObjectType, ID, GraphQLISODateTime } from '@nestjs/graphql';\nimport { SubTaskDTO } from '../sub-task/sub-task.dto'\n\n@ObjectType('TodoItem')\n@FilterableCursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\nexport class TodoItemDTO {\n  @IDField(() => ID)\n  id!: string;\n\n  @FilterableField()\n  title!: string;\n\n  @FilterableField()\n  completed!: boolean;\n\n  @FilterableField(() => GraphQLISODateTime)\n  created!: Date;\n\n  @FilterableField(() => GraphQLISODateTime)\n  updated!: Date;\n}\n\n")),(0,l.kt)("p",null,"Notice the use of ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableCursorConnection")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"@CursorConnection"),", by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"@FilterableCursorConnection")," version ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query")," will allow filtering on the ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," relation."),(0,l.kt)("p",null,"The  module definition remains the same."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.module.ts"',title:'"todo-item/todo-item.module.ts"'},"import { NestjsQueryGraphQLModule } from '@ptc-org/nestjs-query-graphql';\nimport { NestjsQueryTypeOrmModule } from '@ptc-org/nestjs-query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemEntity } from './todo-item.entity';\n\n@Module({\n  imports: [\n    NestjsQueryGraphQLModule.forFeature({\n      imports: [NestjsQueryTypeOrmModule.forFeature([TodoItemEntity])],\n      resolvers: [{ DTOClass: TodoItemDTO, EntityClass: TodoItemEntity }],\n    }),\n  ],\n})\nexport class TodoItemModule {}\n")),(0,l.kt)("p",null,"When querying for ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItems")," you can now also filter on ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," properties."),(0,l.kt)("p",null,"In this example we'll find all ",(0,l.kt)("inlineCode",{parentName:"p"},"todoItems")," that have ",(0,l.kt)("inlineCode",{parentName:"p"},"subTasks")," that are completed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  todoItems(filter: { subTasks: { completed: { is: true } } }) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        title\n        description\n        completed\n        subTasks {\n          edges {\n            node {\n              title\n              description\n              completed\n            }\n          }\n        }\n      }\n      cursor\n    }\n  }\n}\n")),(0,l.kt)("h2",{id:"virtual-relations"},"Virtual Relations"),(0,l.kt)("p",null,"You may run into a case where you have a ",(0,l.kt)("inlineCode",{parentName:"p"},"virtual")," relation that does not exist in the database. ",(0,l.kt)("inlineCode",{parentName:"p"},"nestjs-query"),"\nsupports this through the ",(0,l.kt)("a",{parentName:"p",href:"/nestjs-query/docs/concepts/services#relationqueryservice"},"RelationQueryService"),"."),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("p",null,"The following options can be passed to all relation/connection decorators, to customize\nfunctionality."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"relationName")," - The name of the relation to use when looking up the relation from the ",(0,l.kt)("inlineCode",{parentName:"li"},"QueryService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nullable")," - Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if the relation is nullable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"complexity")," - Set to specify relation complexity. For more info see ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/graphql/complexity"},"complexity docs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"disableRead")," -  Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to disable read operations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enabled")," -  Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to enable update operations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"description")," -  The description of the update operation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"complexity")," - Set to specify relation complexity. For more info see ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/graphql/complexity"},"complexity docs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",(0,l.kt)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"remove"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enabled")," -  Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to enable remove operations."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"description")," -  The description of the remove operation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"complexity")," - Set to specify relation complexity. For more info see ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/graphql/complexity"},"complexity docs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"decorators=[]")," - An array of custom ",(0,l.kt)("inlineCode",{parentName:"li"},"PropertyDecorator")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"MethodDecorators")," to add to the endpoint."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allowFiltering")," - Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to allow filtering on the relation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"guards=[]")," - An array of ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/guards"},"guards")," to add to ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"remove")," endpoints."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"interceptors=[]")," - An array of ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/interceptors"},"interceptors")," to add to ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"remove")," endpoints."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pipes=[]")," - An array of ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/pipes"},"pipes")," to add to ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"remove")," endpoints."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filters=[]")," - An array of ",(0,l.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/exception-filters"},"filters")," to add to ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"remove")," endpoints.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"guards"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"pipes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"interceptors")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"filters")," will not work by default with relation endpoints. See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/graphql/tooling#execute-enhancers-at-the-field-resolver-level"},"https://docs.nestjs.com/graphql/tooling#execute-enhancers-at-the-field-resolver-level"))),(0,l.kt)("h3",{id:"custom-relation-name"},"Custom Relation Name"),(0,l.kt)("p",null,"Sometimes you may want to expose a relation that has a different name when persisted from the graphql property. To do this use the ",(0,l.kt)("inlineCode",{parentName:"p"},"relationName")," property."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// expose todoItem as todoItemRelation in graphql\n@Relation('todoItemRelation', () => TodoItemDTO, { relationName: 'todoItem' })\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// expose subTasks as subTaskConnection in graphql\n@CursorConnection('subTaskConnection', () => SubTaskDTO, { relationName: 'subTasks' })\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// expose subTasks as subTaskConnection in graphql\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { relationName: 'subTasks' })\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// expose subTasks as subTaskConnection in graphql\n@UnPagedRelation('subTasks', () => SubTaskDTO, { relationName: 'subTasks' })\n")))),(0,l.kt)("h3",{id:"graphql-lookahead"},"GraphQL lookahead"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This functionality only works for typeorm!")),(0,l.kt)("p",null,"When you want to optimze your database queries you can set ",(0,l.kt)("inlineCode",{parentName:"p"},"enableLookAhead"),", this will join and select the relation\nwhen it's being fetched in the query."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// enable enableLookAhead for the todoItem relation\n@Relation('todoItemRelation', () => TodoItemDTO, { enableLookAhead: true })\n")))),(0,l.kt)("h3",{id:"disable-reads"},"Disable Reads"),(0,l.kt)("p",null,"To disable the ",(0,l.kt)("inlineCode",{parentName:"p"},"read")," ",(0,l.kt)("inlineCode",{parentName:"p"},"queries")," you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"disableRead")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable reading the todoItem relation\n@Relation('todoItem', () => TodoItemDTO, { disableRead: true })\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable reading the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { disableRead: true })\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable reading the relation\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { disableRead: true })\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable reading the relation\n@UnPagedRelation('subTaskConnection', () => SubTaskDTO, { disableRead: true })\n")))),(0,l.kt)("h4",{id:"disable-filter-or-sorting-in-relations"},"Disable ",(0,l.kt)("inlineCode",{parentName:"h4"},"filter")," or ",(0,l.kt)("inlineCode",{parentName:"h4"},"sorting")," in relations"),(0,l.kt)("p",null,"To disable the ",(0,l.kt)("inlineCode",{parentName:"p"},"filter")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"sorting")," of relations you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"disableFilter")," or/and ",(0,l.kt)("inlineCode",{parentName:"p"},"disableSort")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"This is not available in `relation` as it will only fetch one record.\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"```ts\n// disable reading the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n```\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"```ts\n// disable reading the relation\n@OffsetConnection('subTaskConnection', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n```\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"```ts\n// disable reading the relation\n@UnPagedRelation('subTaskConnection', () => SubTaskDTO, { disableFilter: true, disableSort: true })\n```\n")))),(0,l.kt)("h3",{id:"enable-updates"},"Enable Updates"),(0,l.kt)("p",null,"To enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," ",(0,l.kt)("inlineCode",{parentName:"p"},"mutations")," you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"update.enabled")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable updates to the relation\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable updating subTasks\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable updating subTasks\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable updating subTasks\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n")))),(0,l.kt)("h3",{id:"enable-removes"},"Enable Removes"),(0,l.kt)("p",null,"To enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," ",(0,l.kt)("inlineCode",{parentName:"p"},"mutations")," you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"remove.enabled")," option to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable removing the relation\n@Relation('todoItem', () => TodoItemDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable removing subTasks from the connection\n@CursorConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable removing subTasks from the connection\n@OffsetConnection('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// disable removing subTasks from the relations\n@UnPagedRelation('subTasks', () => SubTaskDTO, { update: { enabled: true } })\n")))),(0,l.kt)("h3",{id:"guards-pipes-and-filters"},"Guards, Pipes and Filters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE")," ",(0,l.kt)("inlineCode",{parentName:"p"},"guards"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"pipes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"interceptors")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"filters")," will not work by default with ",(0,l.kt)("inlineCode",{parentName:"p"},"read")," endpoints. See ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nestjs/graphql/issues/295"},"https://github.com/nestjs/graphql/issues/295")),(0,l.kt)("p",null,"In this example we'll just demonstrate using a ",(0,l.kt)("inlineCode",{parentName:"p"},"guard")," but the same pattern applies for ",(0,l.kt)("inlineCode",{parentName:"p"},"pipes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"filters")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"interceptors")),(0,l.kt)("p",null,"To set up a ",(0,l.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/guards"},"guard")," for endpoint you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"guards")," option."),(0,l.kt)("p",null,"Assume we have the following auth guard that checks for a certain header and value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.guard.ts"',title:'"auth.guard.ts"'},"import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AUTH_HEADER_NAME } from './constants';\nimport { config } from './config';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const ctx = GqlExecutionContext.create(context);\n    const req = ctx.getContext().request;\n    this.logger.log(`Req = ${req.headers}`);\n    return req.headers[AUTH_HEADER_NAME] === config.auth.header;\n  }\n}\n")),(0,l.kt)("p",null,"We can then add it to our relations"),(0,l.kt)(i.Z,{defaultValue:"relation",groupId:"relation-type",values:[{label:"Relation",value:"relation"},{label:"CursorConnection",value:"cursor-connection"},{label:"OffsetConnection",value:"offset-connection"},{label:"UnPagedRelation",value:"unpaged-relation"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Add the AuthGuard using the guards option\n@Relation('todoItem', () => TodoItemDTO, { guards: [AuthGuard] })\n"))),(0,l.kt)(r.Z,{value:"cursor-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Add the AuthGuard using the guards option\n@CursorConnection('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n"))),(0,l.kt)(r.Z,{value:"offset-connection",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Add the AuthGuard using the guards option\n@OffsetConnection('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n"))),(0,l.kt)(r.Z,{value:"unpaged-relation",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// Add the AuthGuard using the guards option\n@UnPagedRelation('subTasks', () => SubTaskDTO, { guards: [AuthGuard] })\n")))),(0,l.kt)("p",null,"Now any requests that go to the ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," endpoints will require the guard."),(0,l.kt)("h3",{id:"relation-mixin"},"Relation Mixin"),(0,l.kt)("p",null,"If you are using the ",(0,l.kt)("a",{parentName:"p",href:"/nestjs-query/docs/graphql/resolvers#individual-resolvers"},"resolvers individually")," you can use the following mixins to\nadd relations functionality."),(0,l.kt)("h4",{id:"relatable"},"Relatable"),(0,l.kt)("p",null,"When using The ",(0,l.kt)("inlineCode",{parentName:"p"},"Relatable")," mixin adds all relations functionality to a resolver."),(0,l.kt)("p",null,"In this example we expose on read endpoints for todo items with the relations defined on the ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItemDTO"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo-item/todo-item.resolver.ts" {12-14}',title:'"todo-item/todo-item.resolver.ts"',"{12-14}":!0},"import { ReadResolver, Relatable } from '@ptc-org/nestjs-query-graphql';\nimport { Resolver } from '@nestjs/graphql';\nimport { AuthGuard } from '../auth.guard';\nimport { SubTaskDTO } from '../sub-task/dto/sub-task.dto';\nimport { TodoItemDTO } from './todo-item.dto';\nimport { TodoItemService } from './todo-item.service';\n\nconst guards = [AuthGuard];\n\n@Resolver(() => TodoItemDTO)\nexport class TodoItemResolver extends Relatable(TodoItemDTO)(ReadResolver(TodoItemDTO)) {\n  constructor(readonly service: TodoItemService) {\n    super(service);\n  }\n}\n")))}T.isMDXComponent=!0}}]);